// Code generated by cmd/genstdlib/main.go; DO NOT EDIT.
package internal

import (
	"reflect"
	i1 "archive/tar"
	i2 "archive/zip"
	i3 "bufio"
	i4 "bytes"
	i6 "compress/flate"
	i7 "compress/gzip"
	i8 "compress/lzw"
	i9 "compress/zlib"
	i11 "container/list"
	i12 "container/ring"
	i16 "crypto/cipher"
	i18 "crypto/dsa"
	i19 "crypto/ecdsa"
	i20 "crypto/ed25519"
	i21 "crypto/elliptic"
	i25 "crypto/rc4"
	i26 "crypto/rsa"
	i31 "crypto/tls"
	i32 "crypto/x509"
	i33 "database/sql"
	i34 "database/sql/driver"
	i36 "encoding/asn1"
	i37 "encoding/base32"
	i38 "encoding/base64"
	i40 "encoding/csv"
	i41 "encoding/gob"
	i43 "encoding/json"
	i44 "encoding/pem"
	i45 "encoding/xml"
	i47 "expvar"
	i48 "flag"
	i54 "hash/maphash"
	i56 "html/template"
	i57 "image"
	i58 "image/color"
	i61 "image/gif"
	i62 "image/jpeg"
	i63 "image/png"
	i64 "index/suffixarray"
	i65 "io"
	i66 "io/fs"
	i68 "log"
	i69 "log/slog"
	i70 "log/syslog"
	i72 "math/big"
	i75 "math/rand"
	i76 "mime"
	i77 "mime/multipart"
	i78 "mime/quotedprintable"
	i79 "net"
	i80 "net/http"
	i81 "net/http/cgi"
	i82 "net/http/cookiejar"
	i84 "net/http/httptest"
	i85 "net/http/httptrace"
	i86 "net/http/httputil"
	i88 "net/mail"
	i89 "net/rpc"
	i91 "net/smtp"
	i92 "net/textproto"
	i93 "net/url"
	i94 "os"
	i95 "os/exec"
	i97 "os/user"
	i100 "plugin"
	i101 "regexp"
	i102 "regexp/syntax"
	i104 "strconv"
	i105 "strings"
	i106 "sync"
	i107 "sync/atomic"
	i108 "text/scanner"
	i109 "text/tabwriter"
	i110 "text/template"
	i111 "text/template/parse"
	i112 "time"
	i113 "unicode"
)

// stdtypes maps package paths to their exported types as reflect.Value not reflect.Type
var stdtypes = map[string]map[string]reflect.Value{}

func init() {
	stdtypes["archive/tar"] = map[string]reflect.Value{
		"Header": reflect.ValueOf(i1.Header{}),
		"Reader": reflect.ValueOf(i1.Reader{}),
		"Writer": reflect.ValueOf(i1.Writer{}),
	}
	stdtypes["archive/zip"] = map[string]reflect.Value{
		"File": reflect.ValueOf(i2.File{}),
		"FileHeader": reflect.ValueOf(i2.FileHeader{}),
		"ReadCloser": reflect.ValueOf(i2.ReadCloser{}),
		"Reader": reflect.ValueOf(i2.Reader{}),
		"Writer": reflect.ValueOf(i2.Writer{}),
	}
	stdtypes["bufio"] = map[string]reflect.Value{
		"ReadWriter": reflect.ValueOf(i3.ReadWriter{}),
		"Reader": reflect.ValueOf(i3.Reader{}),
		"Scanner": reflect.ValueOf(i3.Scanner{}),
		"Writer": reflect.ValueOf(i3.Writer{}),
	}
	stdtypes["bytes"] = map[string]reflect.Value{
		"Buffer": reflect.ValueOf(i4.Buffer{}),
		"Reader": reflect.ValueOf(i4.Reader{}),
	}
	stdtypes["compress/flate"] = map[string]reflect.Value{
		"ReadError": reflect.ValueOf(i6.ReadError{}),
		"WriteError": reflect.ValueOf(i6.WriteError{}),
		"Writer": reflect.ValueOf(i6.Writer{}),
	}
	stdtypes["compress/gzip"] = map[string]reflect.Value{
		"Header": reflect.ValueOf(i7.Header{}),
		"Reader": reflect.ValueOf(i7.Reader{}),
		"Writer": reflect.ValueOf(i7.Writer{}),
	}
	stdtypes["compress/lzw"] = map[string]reflect.Value{
		"Reader": reflect.ValueOf(i8.Reader{}),
		"Writer": reflect.ValueOf(i8.Writer{}),
	}
	stdtypes["compress/zlib"] = map[string]reflect.Value{
		"Writer": reflect.ValueOf(i9.Writer{}),
	}
	stdtypes["container/list"] = map[string]reflect.Value{
		"Element": reflect.ValueOf(i11.Element{}),
		"List": reflect.ValueOf(i11.List{}),
	}
	stdtypes["container/ring"] = map[string]reflect.Value{
		"Ring": reflect.ValueOf(i12.Ring{}),
	}
	stdtypes["crypto/cipher"] = map[string]reflect.Value{
		"StreamReader": reflect.ValueOf(i16.StreamReader{}),
		"StreamWriter": reflect.ValueOf(i16.StreamWriter{}),
	}
	stdtypes["crypto/dsa"] = map[string]reflect.Value{
		"Parameters": reflect.ValueOf(i18.Parameters{}),
		"PrivateKey": reflect.ValueOf(i18.PrivateKey{}),
		"PublicKey": reflect.ValueOf(i18.PublicKey{}),
	}
	stdtypes["crypto/ecdsa"] = map[string]reflect.Value{
		"PrivateKey": reflect.ValueOf(i19.PrivateKey{}),
		"PublicKey": reflect.ValueOf(i19.PublicKey{}),
	}
	stdtypes["crypto/ed25519"] = map[string]reflect.Value{
		"Options": reflect.ValueOf(i20.Options{}),
	}
	stdtypes["crypto/elliptic"] = map[string]reflect.Value{
		"CurveParams": reflect.ValueOf(i21.CurveParams{}),
	}
	stdtypes["crypto/rc4"] = map[string]reflect.Value{
		"Cipher": reflect.ValueOf(i25.Cipher{}),
	}
	stdtypes["crypto/rsa"] = map[string]reflect.Value{
		"CRTValue": reflect.ValueOf(i26.CRTValue{}),
		"OAEPOptions": reflect.ValueOf(i26.OAEPOptions{}),
		"PKCS1v15DecryptOptions": reflect.ValueOf(i26.PKCS1v15DecryptOptions{}),
		"PSSOptions": reflect.ValueOf(i26.PSSOptions{}),
		"PrecomputedValues": reflect.ValueOf(i26.PrecomputedValues{}),
		"PrivateKey": reflect.ValueOf(i26.PrivateKey{}),
		"PublicKey": reflect.ValueOf(i26.PublicKey{}),
	}
	stdtypes["crypto/tls"] = map[string]reflect.Value{
		"Certificate": reflect.ValueOf(i31.Certificate{}),
		"CertificateRequestInfo": reflect.ValueOf(i31.CertificateRequestInfo{}),
		"CertificateVerificationError": reflect.ValueOf(i31.CertificateVerificationError{}),
		"CipherSuite": reflect.ValueOf(i31.CipherSuite{}),
		"ClientHelloInfo": reflect.ValueOf(i31.ClientHelloInfo{}),
		"ClientSessionState": reflect.ValueOf(i31.ClientSessionState{}),
		"Config": reflect.ValueOf(i31.Config{}),
		"Conn": reflect.ValueOf(i31.Conn{}),
		"ConnectionState": reflect.ValueOf(i31.ConnectionState{}),
		"Dialer": reflect.ValueOf(i31.Dialer{}),
		"ECHRejectionError": reflect.ValueOf(i31.ECHRejectionError{}),
		"EncryptedClientHelloKey": reflect.ValueOf(i31.EncryptedClientHelloKey{}),
		"QUICConfig": reflect.ValueOf(i31.QUICConfig{}),
		"QUICConn": reflect.ValueOf(i31.QUICConn{}),
		"QUICEvent": reflect.ValueOf(i31.QUICEvent{}),
		"QUICSessionTicketOptions": reflect.ValueOf(i31.QUICSessionTicketOptions{}),
		"RecordHeaderError": reflect.ValueOf(i31.RecordHeaderError{}),
		"SessionState": reflect.ValueOf(i31.SessionState{}),
	}
	stdtypes["crypto/x509"] = map[string]reflect.Value{
		"CertPool": reflect.ValueOf(i32.CertPool{}),
		"Certificate": reflect.ValueOf(i32.Certificate{}),
		"CertificateInvalidError": reflect.ValueOf(i32.CertificateInvalidError{}),
		"CertificateRequest": reflect.ValueOf(i32.CertificateRequest{}),
		"ConstraintViolationError": reflect.ValueOf(i32.ConstraintViolationError{}),
		"HostnameError": reflect.ValueOf(i32.HostnameError{}),
		"OID": reflect.ValueOf(i32.OID{}),
		"PolicyMapping": reflect.ValueOf(i32.PolicyMapping{}),
		"RevocationList": reflect.ValueOf(i32.RevocationList{}),
		"RevocationListEntry": reflect.ValueOf(i32.RevocationListEntry{}),
		"SystemRootsError": reflect.ValueOf(i32.SystemRootsError{}),
		"UnhandledCriticalExtension": reflect.ValueOf(i32.UnhandledCriticalExtension{}),
		"UnknownAuthorityError": reflect.ValueOf(i32.UnknownAuthorityError{}),
		"VerifyOptions": reflect.ValueOf(i32.VerifyOptions{}),
	}
	stdtypes["database/sql"] = map[string]reflect.Value{
		"ColumnType": reflect.ValueOf(i33.ColumnType{}),
		"Conn": reflect.ValueOf(i33.Conn{}),
		"DB": reflect.ValueOf(i33.DB{}),
		"DBStats": reflect.ValueOf(i33.DBStats{}),
		"NamedArg": reflect.ValueOf(i33.NamedArg{}),
		"NullBool": reflect.ValueOf(i33.NullBool{}),
		"NullByte": reflect.ValueOf(i33.NullByte{}),
		"NullFloat64": reflect.ValueOf(i33.NullFloat64{}),
		"NullInt16": reflect.ValueOf(i33.NullInt16{}),
		"NullInt32": reflect.ValueOf(i33.NullInt32{}),
		"NullInt64": reflect.ValueOf(i33.NullInt64{}),
		"NullString": reflect.ValueOf(i33.NullString{}),
		"NullTime": reflect.ValueOf(i33.NullTime{}),
		"Out": reflect.ValueOf(i33.Out{}),
		"Row": reflect.ValueOf(i33.Row{}),
		"Rows": reflect.ValueOf(i33.Rows{}),
		"Stmt": reflect.ValueOf(i33.Stmt{}),
		"Tx": reflect.ValueOf(i33.Tx{}),
		"TxOptions": reflect.ValueOf(i33.TxOptions{}),
	}
	stdtypes["database/sql/driver"] = map[string]reflect.Value{
		"NamedValue": reflect.ValueOf(i34.NamedValue{}),
		"NotNull": reflect.ValueOf(i34.NotNull{}),
		"Null": reflect.ValueOf(i34.Null{}),
		"TxOptions": reflect.ValueOf(i34.TxOptions{}),
	}
	stdtypes["encoding/asn1"] = map[string]reflect.Value{
		"BitString": reflect.ValueOf(i36.BitString{}),
		"RawValue": reflect.ValueOf(i36.RawValue{}),
		"StructuralError": reflect.ValueOf(i36.StructuralError{}),
		"SyntaxError": reflect.ValueOf(i36.SyntaxError{}),
	}
	stdtypes["encoding/base32"] = map[string]reflect.Value{
		"Encoding": reflect.ValueOf(i37.Encoding{}),
	}
	stdtypes["encoding/base64"] = map[string]reflect.Value{
		"Encoding": reflect.ValueOf(i38.Encoding{}),
	}
	stdtypes["encoding/csv"] = map[string]reflect.Value{
		"ParseError": reflect.ValueOf(i40.ParseError{}),
		"Reader": reflect.ValueOf(i40.Reader{}),
		"Writer": reflect.ValueOf(i40.Writer{}),
	}
	stdtypes["encoding/gob"] = map[string]reflect.Value{
		"CommonType": reflect.ValueOf(i41.CommonType{}),
		"Decoder": reflect.ValueOf(i41.Decoder{}),
		"Encoder": reflect.ValueOf(i41.Encoder{}),
	}
	stdtypes["encoding/json"] = map[string]reflect.Value{
		"Decoder": reflect.ValueOf(i43.Decoder{}),
		"Encoder": reflect.ValueOf(i43.Encoder{}),
		"InvalidUTF8Error": reflect.ValueOf(i43.InvalidUTF8Error{}),
		"InvalidUnmarshalError": reflect.ValueOf(i43.InvalidUnmarshalError{}),
		"MarshalerError": reflect.ValueOf(i43.MarshalerError{}),
		"SyntaxError": reflect.ValueOf(i43.SyntaxError{}),
		"UnmarshalFieldError": reflect.ValueOf(i43.UnmarshalFieldError{}),
		"UnmarshalTypeError": reflect.ValueOf(i43.UnmarshalTypeError{}),
		"UnsupportedTypeError": reflect.ValueOf(i43.UnsupportedTypeError{}),
		"UnsupportedValueError": reflect.ValueOf(i43.UnsupportedValueError{}),
	}
	stdtypes["encoding/pem"] = map[string]reflect.Value{
		"Block": reflect.ValueOf(i44.Block{}),
	}
	stdtypes["encoding/xml"] = map[string]reflect.Value{
		"Attr": reflect.ValueOf(i45.Attr{}),
		"Decoder": reflect.ValueOf(i45.Decoder{}),
		"Encoder": reflect.ValueOf(i45.Encoder{}),
		"EndElement": reflect.ValueOf(i45.EndElement{}),
		"Name": reflect.ValueOf(i45.Name{}),
		"ProcInst": reflect.ValueOf(i45.ProcInst{}),
		"StartElement": reflect.ValueOf(i45.StartElement{}),
		"SyntaxError": reflect.ValueOf(i45.SyntaxError{}),
		"TagPathError": reflect.ValueOf(i45.TagPathError{}),
		"UnsupportedTypeError": reflect.ValueOf(i45.UnsupportedTypeError{}),
	}
	stdtypes["expvar"] = map[string]reflect.Value{
		"Float": reflect.ValueOf(i47.Float{}),
		"Int": reflect.ValueOf(i47.Int{}),
		"KeyValue": reflect.ValueOf(i47.KeyValue{}),
		"Map": reflect.ValueOf(i47.Map{}),
		"String": reflect.ValueOf(i47.String{}),
	}
	stdtypes["flag"] = map[string]reflect.Value{
		"Flag": reflect.ValueOf(i48.Flag{}),
		"FlagSet": reflect.ValueOf(i48.FlagSet{}),
	}
	stdtypes["hash/maphash"] = map[string]reflect.Value{
		"Hash": reflect.ValueOf(i54.Hash{}),
		"Seed": reflect.ValueOf(i54.Seed{}),
	}
	stdtypes["html/template"] = map[string]reflect.Value{
		"Error": reflect.ValueOf(i56.Error{}),
		"Template": reflect.ValueOf(i56.Template{}),
	}
	stdtypes["image"] = map[string]reflect.Value{
		"Alpha": reflect.ValueOf(i57.Alpha{}),
		"Alpha16": reflect.ValueOf(i57.Alpha16{}),
		"CMYK": reflect.ValueOf(i57.CMYK{}),
		"Config": reflect.ValueOf(i57.Config{}),
		"Gray": reflect.ValueOf(i57.Gray{}),
		"Gray16": reflect.ValueOf(i57.Gray16{}),
		"NRGBA": reflect.ValueOf(i57.NRGBA{}),
		"NRGBA64": reflect.ValueOf(i57.NRGBA64{}),
		"NYCbCrA": reflect.ValueOf(i57.NYCbCrA{}),
		"Paletted": reflect.ValueOf(i57.Paletted{}),
		"Point": reflect.ValueOf(i57.Point{}),
		"RGBA": reflect.ValueOf(i57.RGBA{}),
		"RGBA64": reflect.ValueOf(i57.RGBA64{}),
		"Rectangle": reflect.ValueOf(i57.Rectangle{}),
		"Uniform": reflect.ValueOf(i57.Uniform{}),
		"YCbCr": reflect.ValueOf(i57.YCbCr{}),
	}
	stdtypes["image/color"] = map[string]reflect.Value{
		"Alpha": reflect.ValueOf(i58.Alpha{}),
		"Alpha16": reflect.ValueOf(i58.Alpha16{}),
		"CMYK": reflect.ValueOf(i58.CMYK{}),
		"Gray": reflect.ValueOf(i58.Gray{}),
		"Gray16": reflect.ValueOf(i58.Gray16{}),
		"NRGBA": reflect.ValueOf(i58.NRGBA{}),
		"NRGBA64": reflect.ValueOf(i58.NRGBA64{}),
		"NYCbCrA": reflect.ValueOf(i58.NYCbCrA{}),
		"RGBA": reflect.ValueOf(i58.RGBA{}),
		"RGBA64": reflect.ValueOf(i58.RGBA64{}),
		"YCbCr": reflect.ValueOf(i58.YCbCr{}),
	}
	stdtypes["image/gif"] = map[string]reflect.Value{
		"GIF": reflect.ValueOf(i61.GIF{}),
		"Options": reflect.ValueOf(i61.Options{}),
	}
	stdtypes["image/jpeg"] = map[string]reflect.Value{
		"Options": reflect.ValueOf(i62.Options{}),
	}
	stdtypes["image/png"] = map[string]reflect.Value{
		"Encoder": reflect.ValueOf(i63.Encoder{}),
	}
	stdtypes["index/suffixarray"] = map[string]reflect.Value{
		"Index": reflect.ValueOf(i64.Index{}),
	}
	stdtypes["io"] = map[string]reflect.Value{
		"LimitedReader": reflect.ValueOf(i65.LimitedReader{}),
		"OffsetWriter": reflect.ValueOf(i65.OffsetWriter{}),
		"PipeReader": reflect.ValueOf(i65.PipeReader{}),
		"PipeWriter": reflect.ValueOf(i65.PipeWriter{}),
		"SectionReader": reflect.ValueOf(i65.SectionReader{}),
	}
	stdtypes["io/fs"] = map[string]reflect.Value{
		"PathError": reflect.ValueOf(i66.PathError{}),
	}
	stdtypes["log"] = map[string]reflect.Value{
		"Logger": reflect.ValueOf(i68.Logger{}),
	}
	stdtypes["log/slog"] = map[string]reflect.Value{
		"Attr": reflect.ValueOf(i69.Attr{}),
		"HandlerOptions": reflect.ValueOf(i69.HandlerOptions{}),
		"JSONHandler": reflect.ValueOf(i69.JSONHandler{}),
		"LevelVar": reflect.ValueOf(i69.LevelVar{}),
		"Logger": reflect.ValueOf(i69.Logger{}),
		"Record": reflect.ValueOf(i69.Record{}),
		"Source": reflect.ValueOf(i69.Source{}),
		"TextHandler": reflect.ValueOf(i69.TextHandler{}),
		"Value": reflect.ValueOf(i69.Value{}),
	}
	stdtypes["log/syslog"] = map[string]reflect.Value{
		"Writer": reflect.ValueOf(i70.Writer{}),
	}
	stdtypes["math/big"] = map[string]reflect.Value{
		"ErrNaN": reflect.ValueOf(i72.ErrNaN{}),
		"Float": reflect.ValueOf(i72.Float{}),
		"Int": reflect.ValueOf(i72.Int{}),
		"Rat": reflect.ValueOf(i72.Rat{}),
	}
	stdtypes["math/rand"] = map[string]reflect.Value{
		"Rand": reflect.ValueOf(i75.Rand{}),
		"Zipf": reflect.ValueOf(i75.Zipf{}),
	}
	stdtypes["mime"] = map[string]reflect.Value{
		"WordDecoder": reflect.ValueOf(i76.WordDecoder{}),
	}
	stdtypes["mime/multipart"] = map[string]reflect.Value{
		"FileHeader": reflect.ValueOf(i77.FileHeader{}),
		"Form": reflect.ValueOf(i77.Form{}),
		"Part": reflect.ValueOf(i77.Part{}),
		"Reader": reflect.ValueOf(i77.Reader{}),
		"Writer": reflect.ValueOf(i77.Writer{}),
	}
	stdtypes["mime/quotedprintable"] = map[string]reflect.Value{
		"Reader": reflect.ValueOf(i78.Reader{}),
		"Writer": reflect.ValueOf(i78.Writer{}),
	}
	stdtypes["net"] = map[string]reflect.Value{
		"AddrError": reflect.ValueOf(i79.AddrError{}),
		"DNSConfigError": reflect.ValueOf(i79.DNSConfigError{}),
		"DNSError": reflect.ValueOf(i79.DNSError{}),
		"Dialer": reflect.ValueOf(i79.Dialer{}),
		"IPAddr": reflect.ValueOf(i79.IPAddr{}),
		"IPConn": reflect.ValueOf(i79.IPConn{}),
		"IPNet": reflect.ValueOf(i79.IPNet{}),
		"Interface": reflect.ValueOf(i79.Interface{}),
		"KeepAliveConfig": reflect.ValueOf(i79.KeepAliveConfig{}),
		"ListenConfig": reflect.ValueOf(i79.ListenConfig{}),
		"MX": reflect.ValueOf(i79.MX{}),
		"NS": reflect.ValueOf(i79.NS{}),
		"OpError": reflect.ValueOf(i79.OpError{}),
		"ParseError": reflect.ValueOf(i79.ParseError{}),
		"Resolver": reflect.ValueOf(i79.Resolver{}),
		"SRV": reflect.ValueOf(i79.SRV{}),
		"TCPAddr": reflect.ValueOf(i79.TCPAddr{}),
		"TCPConn": reflect.ValueOf(i79.TCPConn{}),
		"TCPListener": reflect.ValueOf(i79.TCPListener{}),
		"UDPAddr": reflect.ValueOf(i79.UDPAddr{}),
		"UDPConn": reflect.ValueOf(i79.UDPConn{}),
		"UnixAddr": reflect.ValueOf(i79.UnixAddr{}),
		"UnixConn": reflect.ValueOf(i79.UnixConn{}),
		"UnixListener": reflect.ValueOf(i79.UnixListener{}),
	}
	stdtypes["net/http"] = map[string]reflect.Value{
		"Client": reflect.ValueOf(i80.Client{}),
		"Cookie": reflect.ValueOf(i80.Cookie{}),
		"CrossOriginProtection": reflect.ValueOf(i80.CrossOriginProtection{}),
		"HTTP2Config": reflect.ValueOf(i80.HTTP2Config{}),
		"MaxBytesError": reflect.ValueOf(i80.MaxBytesError{}),
		"ProtocolError": reflect.ValueOf(i80.ProtocolError{}),
		"Protocols": reflect.ValueOf(i80.Protocols{}),
		"PushOptions": reflect.ValueOf(i80.PushOptions{}),
		"Request": reflect.ValueOf(i80.Request{}),
		"Response": reflect.ValueOf(i80.Response{}),
		"ResponseController": reflect.ValueOf(i80.ResponseController{}),
		"ServeMux": reflect.ValueOf(i80.ServeMux{}),
		"Server": reflect.ValueOf(i80.Server{}),
		"Transport": reflect.ValueOf(i80.Transport{}),
	}
	stdtypes["net/http/cgi"] = map[string]reflect.Value{
		"Handler": reflect.ValueOf(i81.Handler{}),
	}
	stdtypes["net/http/cookiejar"] = map[string]reflect.Value{
		"Jar": reflect.ValueOf(i82.Jar{}),
		"Options": reflect.ValueOf(i82.Options{}),
	}
	stdtypes["net/http/httptest"] = map[string]reflect.Value{
		"ResponseRecorder": reflect.ValueOf(i84.ResponseRecorder{}),
		"Server": reflect.ValueOf(i84.Server{}),
	}
	stdtypes["net/http/httptrace"] = map[string]reflect.Value{
		"ClientTrace": reflect.ValueOf(i85.ClientTrace{}),
		"DNSDoneInfo": reflect.ValueOf(i85.DNSDoneInfo{}),
		"DNSStartInfo": reflect.ValueOf(i85.DNSStartInfo{}),
		"GotConnInfo": reflect.ValueOf(i85.GotConnInfo{}),
		"WroteRequestInfo": reflect.ValueOf(i85.WroteRequestInfo{}),
	}
	stdtypes["net/http/httputil"] = map[string]reflect.Value{
		"ClientConn": reflect.ValueOf(i86.ClientConn{}),
		"ProxyRequest": reflect.ValueOf(i86.ProxyRequest{}),
		"ReverseProxy": reflect.ValueOf(i86.ReverseProxy{}),
		"ServerConn": reflect.ValueOf(i86.ServerConn{}),
	}
	stdtypes["net/mail"] = map[string]reflect.Value{
		"Address": reflect.ValueOf(i88.Address{}),
		"AddressParser": reflect.ValueOf(i88.AddressParser{}),
		"Message": reflect.ValueOf(i88.Message{}),
	}
	stdtypes["net/rpc"] = map[string]reflect.Value{
		"Call": reflect.ValueOf(i89.Call{}),
		"Client": reflect.ValueOf(i89.Client{}),
		"Request": reflect.ValueOf(i89.Request{}),
		"Response": reflect.ValueOf(i89.Response{}),
		"Server": reflect.ValueOf(i89.Server{}),
	}
	stdtypes["net/smtp"] = map[string]reflect.Value{
		"Client": reflect.ValueOf(i91.Client{}),
		"ServerInfo": reflect.ValueOf(i91.ServerInfo{}),
	}
	stdtypes["net/textproto"] = map[string]reflect.Value{
		"Conn": reflect.ValueOf(i92.Conn{}),
		"Error": reflect.ValueOf(i92.Error{}),
		"Pipeline": reflect.ValueOf(i92.Pipeline{}),
		"Reader": reflect.ValueOf(i92.Reader{}),
		"Writer": reflect.ValueOf(i92.Writer{}),
	}
	stdtypes["net/url"] = map[string]reflect.Value{
		"Error": reflect.ValueOf(i93.Error{}),
		"URL": reflect.ValueOf(i93.URL{}),
		"Userinfo": reflect.ValueOf(i93.Userinfo{}),
	}
	stdtypes["os"] = map[string]reflect.Value{
		"File": reflect.ValueOf(i94.File{}),
		"LinkError": reflect.ValueOf(i94.LinkError{}),
		"ProcAttr": reflect.ValueOf(i94.ProcAttr{}),
		"Process": reflect.ValueOf(i94.Process{}),
		"ProcessState": reflect.ValueOf(i94.ProcessState{}),
		"Root": reflect.ValueOf(i94.Root{}),
		"SyscallError": reflect.ValueOf(i94.SyscallError{}),
	}
	stdtypes["os/exec"] = map[string]reflect.Value{
		"Cmd": reflect.ValueOf(i95.Cmd{}),
		"Error": reflect.ValueOf(i95.Error{}),
		"ExitError": reflect.ValueOf(i95.ExitError{}),
	}
	stdtypes["os/user"] = map[string]reflect.Value{
		"Group": reflect.ValueOf(i97.Group{}),
		"User": reflect.ValueOf(i97.User{}),
	}
	stdtypes["plugin"] = map[string]reflect.Value{
		"Plugin": reflect.ValueOf(i100.Plugin{}),
	}
	stdtypes["regexp"] = map[string]reflect.Value{
		"Regexp": reflect.ValueOf(i101.Regexp{}),
	}
	stdtypes["regexp/syntax"] = map[string]reflect.Value{
		"Error": reflect.ValueOf(i102.Error{}),
		"Inst": reflect.ValueOf(i102.Inst{}),
		"Prog": reflect.ValueOf(i102.Prog{}),
		"Regexp": reflect.ValueOf(i102.Regexp{}),
	}
	stdtypes["strconv"] = map[string]reflect.Value{
		"NumError": reflect.ValueOf(i104.NumError{}),
	}
	stdtypes["strings"] = map[string]reflect.Value{
		"Builder": reflect.ValueOf(i105.Builder{}),
		"Reader": reflect.ValueOf(i105.Reader{}),
		"Replacer": reflect.ValueOf(i105.Replacer{}),
	}
	stdtypes["sync"] = map[string]reflect.Value{
		"Cond": reflect.ValueOf(i106.Cond{}),
		"Map": reflect.ValueOf(i106.Map{}),
		"Mutex": reflect.ValueOf(i106.Mutex{}),
		"Once": reflect.ValueOf(i106.Once{}),
		"Pool": reflect.ValueOf(i106.Pool{}),
		"RWMutex": reflect.ValueOf(i106.RWMutex{}),
		"WaitGroup": reflect.ValueOf(i106.WaitGroup{}),
	}
	stdtypes["sync/atomic"] = map[string]reflect.Value{
		"Bool": reflect.ValueOf(i107.Bool{}),
		"Int32": reflect.ValueOf(i107.Int32{}),
		"Int64": reflect.ValueOf(i107.Int64{}),
		"Uint32": reflect.ValueOf(i107.Uint32{}),
		"Uint64": reflect.ValueOf(i107.Uint64{}),
		"Uintptr": reflect.ValueOf(i107.Uintptr{}),
		"Value": reflect.ValueOf(i107.Value{}),
	}
	stdtypes["text/scanner"] = map[string]reflect.Value{
		"Position": reflect.ValueOf(i108.Position{}),
		"Scanner": reflect.ValueOf(i108.Scanner{}),
	}
	stdtypes["text/tabwriter"] = map[string]reflect.Value{
		"Writer": reflect.ValueOf(i109.Writer{}),
	}
	stdtypes["text/template"] = map[string]reflect.Value{
		"ExecError": reflect.ValueOf(i110.ExecError{}),
		"Template": reflect.ValueOf(i110.Template{}),
	}
	stdtypes["text/template/parse"] = map[string]reflect.Value{
		"ActionNode": reflect.ValueOf(i111.ActionNode{}),
		"BoolNode": reflect.ValueOf(i111.BoolNode{}),
		"BranchNode": reflect.ValueOf(i111.BranchNode{}),
		"BreakNode": reflect.ValueOf(i111.BreakNode{}),
		"ChainNode": reflect.ValueOf(i111.ChainNode{}),
		"CommandNode": reflect.ValueOf(i111.CommandNode{}),
		"CommentNode": reflect.ValueOf(i111.CommentNode{}),
		"ContinueNode": reflect.ValueOf(i111.ContinueNode{}),
		"DotNode": reflect.ValueOf(i111.DotNode{}),
		"FieldNode": reflect.ValueOf(i111.FieldNode{}),
		"IdentifierNode": reflect.ValueOf(i111.IdentifierNode{}),
		"IfNode": reflect.ValueOf(i111.IfNode{}),
		"ListNode": reflect.ValueOf(i111.ListNode{}),
		"NilNode": reflect.ValueOf(i111.NilNode{}),
		"NumberNode": reflect.ValueOf(i111.NumberNode{}),
		"PipeNode": reflect.ValueOf(i111.PipeNode{}),
		"RangeNode": reflect.ValueOf(i111.RangeNode{}),
		"StringNode": reflect.ValueOf(i111.StringNode{}),
		"TemplateNode": reflect.ValueOf(i111.TemplateNode{}),
		"TextNode": reflect.ValueOf(i111.TextNode{}),
		"Tree": reflect.ValueOf(i111.Tree{}),
		"VariableNode": reflect.ValueOf(i111.VariableNode{}),
		"WithNode": reflect.ValueOf(i111.WithNode{}),
	}
	stdtypes["time"] = map[string]reflect.Value{
		"Location": reflect.ValueOf(i112.Location{}),
		"ParseError": reflect.ValueOf(i112.ParseError{}),
		"Ticker": reflect.ValueOf(i112.Ticker{}),
		"Time": reflect.ValueOf(i112.Time{}),
		"Timer": reflect.ValueOf(i112.Timer{}),
	}
	stdtypes["unicode"] = map[string]reflect.Value{
		"CaseRange": reflect.ValueOf(i113.CaseRange{}),
		"Range16": reflect.ValueOf(i113.Range16{}),
		"Range32": reflect.ValueOf(i113.Range32{}),
		"RangeTable": reflect.ValueOf(i113.RangeTable{}),
	}
}
