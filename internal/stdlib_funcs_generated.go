// Code generated by cmd/genstdlib/main.go; DO NOT EDIT.
package internal

import (
	"reflect"
	i1 "archive/tar"
	i2 "archive/zip"
	i3 "bufio"
	i4 "bytes"
	i5 "compress/bzip2"
	i6 "compress/flate"
	i7 "compress/gzip"
	i8 "compress/lzw"
	i9 "compress/zlib"
	i10 "container/heap"
	i11 "container/list"
	i12 "container/ring"
	i13 "context"
	i14 "crypto"
	i15 "crypto/aes"
	i16 "crypto/cipher"
	i17 "crypto/des"
	i18 "crypto/dsa"
	i19 "crypto/ecdsa"
	i20 "crypto/ed25519"
	i21 "crypto/elliptic"
	i22 "crypto/hmac"
	i23 "crypto/md5"
	i24 "crypto/rand"
	i25 "crypto/rc4"
	i26 "crypto/rsa"
	i27 "crypto/sha1"
	i28 "crypto/sha256"
	i29 "crypto/sha512"
	i30 "crypto/subtle"
	i31 "crypto/tls"
	i32 "crypto/x509"
	i33 "database/sql"
	i34 "database/sql/driver"
	i35 "encoding/ascii85"
	i36 "encoding/asn1"
	i37 "encoding/base32"
	i38 "encoding/base64"
	i39 "encoding/binary"
	i40 "encoding/csv"
	i41 "encoding/gob"
	i42 "encoding/hex"
	i43 "encoding/json"
	i44 "encoding/pem"
	i45 "encoding/xml"
	i46 "errors"
	i47 "expvar"
	i48 "flag"
	i49 "fmt"
	i50 "hash/adler32"
	i51 "hash/crc32"
	i52 "hash/crc64"
	i53 "hash/fnv"
	i54 "hash/maphash"
	i55 "html"
	i56 "html/template"
	i57 "image"
	i58 "image/color"
	i59 "image/color/palette"
	i60 "image/draw"
	i61 "image/gif"
	i62 "image/jpeg"
	i63 "image/png"
	i64 "index/suffixarray"
	i65 "io"
	i66 "io/fs"
	i67 "io/ioutil"
	i68 "log"
	i69 "log/slog"
	i70 "log/syslog"
	i71 "math"
	i72 "math/big"
	i73 "math/bits"
	i74 "math/cmplx"
	i75 "math/rand"
	i76 "mime"
	i77 "mime/multipart"
	i78 "mime/quotedprintable"
	i79 "net"
	i80 "net/http"
	i81 "net/http/cgi"
	i82 "net/http/cookiejar"
	i83 "net/http/fcgi"
	i84 "net/http/httptest"
	i85 "net/http/httptrace"
	i86 "net/http/httputil"
	i87 "net/http/pprof"
	i88 "net/mail"
	i89 "net/rpc"
	i90 "net/rpc/jsonrpc"
	i91 "net/smtp"
	i92 "net/textproto"
	i93 "net/url"
	i94 "os"
	i95 "os/exec"
	i96 "os/signal"
	i97 "os/user"
	i98 "path"
	i99 "path/filepath"
	i100 "plugin"
	i101 "regexp"
	i102 "regexp/syntax"
	i103 "sort"
	i104 "strconv"
	i105 "strings"
	i106 "sync"
	i107 "sync/atomic"
	i108 "text/scanner"
	i109 "text/tabwriter"
	i110 "text/template"
	i111 "text/template/parse"
	i112 "time"
	i113 "unicode"
	i114 "unicode/utf16"
	i115 "unicode/utf8"
)

var stdfuncs = map[string]map[string]reflect.Value{}

func init() {
	stdfuncs["archive/tar"] = map[string]reflect.Value{
		"ErrFieldTooLong": reflect.ValueOf(i1.ErrFieldTooLong),
		"ErrHeader": reflect.ValueOf(i1.ErrHeader),
		"ErrInsecurePath": reflect.ValueOf(i1.ErrInsecurePath),
		"ErrWriteAfterClose": reflect.ValueOf(i1.ErrWriteAfterClose),
		"ErrWriteTooLong": reflect.ValueOf(i1.ErrWriteTooLong),
		"FileInfoHeader": reflect.ValueOf(i1.FileInfoHeader),
		"FormatGNU": reflect.ValueOf(i1.FormatGNU),
		"FormatPAX": reflect.ValueOf(i1.FormatPAX),
		"FormatUSTAR": reflect.ValueOf(i1.FormatUSTAR),
		"FormatUnknown": reflect.ValueOf(i1.FormatUnknown),
		"NewReader": reflect.ValueOf(i1.NewReader),
		"NewWriter": reflect.ValueOf(i1.NewWriter),
		"TypeBlock": reflect.ValueOf(i1.TypeBlock),
		"TypeChar": reflect.ValueOf(i1.TypeChar),
		"TypeCont": reflect.ValueOf(i1.TypeCont),
		"TypeDir": reflect.ValueOf(i1.TypeDir),
		"TypeFifo": reflect.ValueOf(i1.TypeFifo),
		"TypeGNULongLink": reflect.ValueOf(i1.TypeGNULongLink),
		"TypeGNULongName": reflect.ValueOf(i1.TypeGNULongName),
		"TypeGNUSparse": reflect.ValueOf(i1.TypeGNUSparse),
		"TypeLink": reflect.ValueOf(i1.TypeLink),
		"TypeReg": reflect.ValueOf(i1.TypeReg),
		"TypeRegA": reflect.ValueOf(i1.TypeRegA),
		"TypeSymlink": reflect.ValueOf(i1.TypeSymlink),
		"TypeXGlobalHeader": reflect.ValueOf(i1.TypeXGlobalHeader),
		"TypeXHeader": reflect.ValueOf(i1.TypeXHeader),
	}
	stdfuncs["archive/zip"] = map[string]reflect.Value{
		"Deflate": reflect.ValueOf(i2.Deflate),
		"ErrAlgorithm": reflect.ValueOf(i2.ErrAlgorithm),
		"ErrChecksum": reflect.ValueOf(i2.ErrChecksum),
		"ErrFormat": reflect.ValueOf(i2.ErrFormat),
		"ErrInsecurePath": reflect.ValueOf(i2.ErrInsecurePath),
		"FileInfoHeader": reflect.ValueOf(i2.FileInfoHeader),
		"NewReader": reflect.ValueOf(i2.NewReader),
		"NewWriter": reflect.ValueOf(i2.NewWriter),
		"OpenReader": reflect.ValueOf(i2.OpenReader),
		"RegisterCompressor": reflect.ValueOf(i2.RegisterCompressor),
		"RegisterDecompressor": reflect.ValueOf(i2.RegisterDecompressor),
		"Store": reflect.ValueOf(i2.Store),
	}
	stdfuncs["bufio"] = map[string]reflect.Value{
		"ErrAdvanceTooFar": reflect.ValueOf(i3.ErrAdvanceTooFar),
		"ErrBadReadCount": reflect.ValueOf(i3.ErrBadReadCount),
		"ErrBufferFull": reflect.ValueOf(i3.ErrBufferFull),
		"ErrFinalToken": reflect.ValueOf(i3.ErrFinalToken),
		"ErrInvalidUnreadByte": reflect.ValueOf(i3.ErrInvalidUnreadByte),
		"ErrInvalidUnreadRune": reflect.ValueOf(i3.ErrInvalidUnreadRune),
		"ErrNegativeAdvance": reflect.ValueOf(i3.ErrNegativeAdvance),
		"ErrNegativeCount": reflect.ValueOf(i3.ErrNegativeCount),
		"ErrTooLong": reflect.ValueOf(i3.ErrTooLong),
		"MaxScanTokenSize": reflect.ValueOf(i3.MaxScanTokenSize),
		"NewReadWriter": reflect.ValueOf(i3.NewReadWriter),
		"NewReader": reflect.ValueOf(i3.NewReader),
		"NewReaderSize": reflect.ValueOf(i3.NewReaderSize),
		"NewScanner": reflect.ValueOf(i3.NewScanner),
		"NewWriter": reflect.ValueOf(i3.NewWriter),
		"NewWriterSize": reflect.ValueOf(i3.NewWriterSize),
		"ScanBytes": reflect.ValueOf(i3.ScanBytes),
		"ScanLines": reflect.ValueOf(i3.ScanLines),
		"ScanRunes": reflect.ValueOf(i3.ScanRunes),
		"ScanWords": reflect.ValueOf(i3.ScanWords),
	}
	stdfuncs["bytes"] = map[string]reflect.Value{
		"Clone": reflect.ValueOf(i4.Clone),
		"Compare": reflect.ValueOf(i4.Compare),
		"Contains": reflect.ValueOf(i4.Contains),
		"ContainsAny": reflect.ValueOf(i4.ContainsAny),
		"ContainsFunc": reflect.ValueOf(i4.ContainsFunc),
		"ContainsRune": reflect.ValueOf(i4.ContainsRune),
		"Count": reflect.ValueOf(i4.Count),
		"Cut": reflect.ValueOf(i4.Cut),
		"CutPrefix": reflect.ValueOf(i4.CutPrefix),
		"CutSuffix": reflect.ValueOf(i4.CutSuffix),
		"Equal": reflect.ValueOf(i4.Equal),
		"EqualFold": reflect.ValueOf(i4.EqualFold),
		"ErrTooLarge": reflect.ValueOf(i4.ErrTooLarge),
		"Fields": reflect.ValueOf(i4.Fields),
		"FieldsFunc": reflect.ValueOf(i4.FieldsFunc),
		"FieldsFuncSeq": reflect.ValueOf(i4.FieldsFuncSeq),
		"FieldsSeq": reflect.ValueOf(i4.FieldsSeq),
		"HasPrefix": reflect.ValueOf(i4.HasPrefix),
		"HasSuffix": reflect.ValueOf(i4.HasSuffix),
		"Index": reflect.ValueOf(i4.Index),
		"IndexAny": reflect.ValueOf(i4.IndexAny),
		"IndexByte": reflect.ValueOf(i4.IndexByte),
		"IndexFunc": reflect.ValueOf(i4.IndexFunc),
		"IndexRune": reflect.ValueOf(i4.IndexRune),
		"Join": reflect.ValueOf(i4.Join),
		"LastIndex": reflect.ValueOf(i4.LastIndex),
		"LastIndexAny": reflect.ValueOf(i4.LastIndexAny),
		"LastIndexByte": reflect.ValueOf(i4.LastIndexByte),
		"LastIndexFunc": reflect.ValueOf(i4.LastIndexFunc),
		"Lines": reflect.ValueOf(i4.Lines),
		"Map": reflect.ValueOf(i4.Map),
		"MinRead": reflect.ValueOf(i4.MinRead),
		"NewBuffer": reflect.ValueOf(i4.NewBuffer),
		"NewBufferString": reflect.ValueOf(i4.NewBufferString),
		"NewReader": reflect.ValueOf(i4.NewReader),
		"Repeat": reflect.ValueOf(i4.Repeat),
		"Replace": reflect.ValueOf(i4.Replace),
		"ReplaceAll": reflect.ValueOf(i4.ReplaceAll),
		"Runes": reflect.ValueOf(i4.Runes),
		"Split": reflect.ValueOf(i4.Split),
		"SplitAfter": reflect.ValueOf(i4.SplitAfter),
		"SplitAfterN": reflect.ValueOf(i4.SplitAfterN),
		"SplitAfterSeq": reflect.ValueOf(i4.SplitAfterSeq),
		"SplitN": reflect.ValueOf(i4.SplitN),
		"SplitSeq": reflect.ValueOf(i4.SplitSeq),
		"Title": reflect.ValueOf(i4.Title),
		"ToLower": reflect.ValueOf(i4.ToLower),
		"ToLowerSpecial": reflect.ValueOf(i4.ToLowerSpecial),
		"ToTitle": reflect.ValueOf(i4.ToTitle),
		"ToTitleSpecial": reflect.ValueOf(i4.ToTitleSpecial),
		"ToUpper": reflect.ValueOf(i4.ToUpper),
		"ToUpperSpecial": reflect.ValueOf(i4.ToUpperSpecial),
		"ToValidUTF8": reflect.ValueOf(i4.ToValidUTF8),
		"Trim": reflect.ValueOf(i4.Trim),
		"TrimFunc": reflect.ValueOf(i4.TrimFunc),
		"TrimLeft": reflect.ValueOf(i4.TrimLeft),
		"TrimLeftFunc": reflect.ValueOf(i4.TrimLeftFunc),
		"TrimPrefix": reflect.ValueOf(i4.TrimPrefix),
		"TrimRight": reflect.ValueOf(i4.TrimRight),
		"TrimRightFunc": reflect.ValueOf(i4.TrimRightFunc),
		"TrimSpace": reflect.ValueOf(i4.TrimSpace),
		"TrimSuffix": reflect.ValueOf(i4.TrimSuffix),
	}
	stdfuncs["compress/bzip2"] = map[string]reflect.Value{
		"NewReader": reflect.ValueOf(i5.NewReader),
	}
	stdfuncs["compress/flate"] = map[string]reflect.Value{
		"BestCompression": reflect.ValueOf(i6.BestCompression),
		"BestSpeed": reflect.ValueOf(i6.BestSpeed),
		"DefaultCompression": reflect.ValueOf(i6.DefaultCompression),
		"HuffmanOnly": reflect.ValueOf(i6.HuffmanOnly),
		"NewReader": reflect.ValueOf(i6.NewReader),
		"NewReaderDict": reflect.ValueOf(i6.NewReaderDict),
		"NewWriter": reflect.ValueOf(i6.NewWriter),
		"NewWriterDict": reflect.ValueOf(i6.NewWriterDict),
		"NoCompression": reflect.ValueOf(i6.NoCompression),
	}
	stdfuncs["compress/gzip"] = map[string]reflect.Value{
		"BestCompression": reflect.ValueOf(i7.BestCompression),
		"BestSpeed": reflect.ValueOf(i7.BestSpeed),
		"DefaultCompression": reflect.ValueOf(i7.DefaultCompression),
		"ErrChecksum": reflect.ValueOf(i7.ErrChecksum),
		"ErrHeader": reflect.ValueOf(i7.ErrHeader),
		"HuffmanOnly": reflect.ValueOf(i7.HuffmanOnly),
		"NewReader": reflect.ValueOf(i7.NewReader),
		"NewWriter": reflect.ValueOf(i7.NewWriter),
		"NewWriterLevel": reflect.ValueOf(i7.NewWriterLevel),
		"NoCompression": reflect.ValueOf(i7.NoCompression),
	}
	stdfuncs["compress/lzw"] = map[string]reflect.Value{
		"LSB": reflect.ValueOf(i8.LSB),
		"MSB": reflect.ValueOf(i8.MSB),
		"NewReader": reflect.ValueOf(i8.NewReader),
		"NewWriter": reflect.ValueOf(i8.NewWriter),
	}
	stdfuncs["compress/zlib"] = map[string]reflect.Value{
		"BestCompression": reflect.ValueOf(i9.BestCompression),
		"BestSpeed": reflect.ValueOf(i9.BestSpeed),
		"DefaultCompression": reflect.ValueOf(i9.DefaultCompression),
		"ErrChecksum": reflect.ValueOf(i9.ErrChecksum),
		"ErrDictionary": reflect.ValueOf(i9.ErrDictionary),
		"ErrHeader": reflect.ValueOf(i9.ErrHeader),
		"HuffmanOnly": reflect.ValueOf(i9.HuffmanOnly),
		"NewReader": reflect.ValueOf(i9.NewReader),
		"NewReaderDict": reflect.ValueOf(i9.NewReaderDict),
		"NewWriter": reflect.ValueOf(i9.NewWriter),
		"NewWriterLevel": reflect.ValueOf(i9.NewWriterLevel),
		"NewWriterLevelDict": reflect.ValueOf(i9.NewWriterLevelDict),
		"NoCompression": reflect.ValueOf(i9.NoCompression),
	}
	stdfuncs["container/heap"] = map[string]reflect.Value{
		"Fix": reflect.ValueOf(i10.Fix),
		"Init": reflect.ValueOf(i10.Init),
		"Pop": reflect.ValueOf(i10.Pop),
		"Push": reflect.ValueOf(i10.Push),
		"Remove": reflect.ValueOf(i10.Remove),
	}
	stdfuncs["container/list"] = map[string]reflect.Value{
		"New": reflect.ValueOf(i11.New),
	}
	stdfuncs["container/ring"] = map[string]reflect.Value{
		"New": reflect.ValueOf(i12.New),
	}
	stdfuncs["context"] = map[string]reflect.Value{
		"AfterFunc": reflect.ValueOf(i13.AfterFunc),
		"Background": reflect.ValueOf(i13.Background),
		"Canceled": reflect.ValueOf(i13.Canceled),
		"Cause": reflect.ValueOf(i13.Cause),
		"DeadlineExceeded": reflect.ValueOf(i13.DeadlineExceeded),
		"TODO": reflect.ValueOf(i13.TODO),
		"WithCancel": reflect.ValueOf(i13.WithCancel),
		"WithCancelCause": reflect.ValueOf(i13.WithCancelCause),
		"WithDeadline": reflect.ValueOf(i13.WithDeadline),
		"WithDeadlineCause": reflect.ValueOf(i13.WithDeadlineCause),
		"WithTimeout": reflect.ValueOf(i13.WithTimeout),
		"WithTimeoutCause": reflect.ValueOf(i13.WithTimeoutCause),
		"WithValue": reflect.ValueOf(i13.WithValue),
		"WithoutCancel": reflect.ValueOf(i13.WithoutCancel),
	}
	stdfuncs["crypto"] = map[string]reflect.Value{
		"BLAKE2b_256": reflect.ValueOf(i14.BLAKE2b_256),
		"BLAKE2b_384": reflect.ValueOf(i14.BLAKE2b_384),
		"BLAKE2b_512": reflect.ValueOf(i14.BLAKE2b_512),
		"BLAKE2s_256": reflect.ValueOf(i14.BLAKE2s_256),
		"MD4": reflect.ValueOf(i14.MD4),
		"MD5": reflect.ValueOf(i14.MD5),
		"MD5SHA1": reflect.ValueOf(i14.MD5SHA1),
		"RIPEMD160": reflect.ValueOf(i14.RIPEMD160),
		"RegisterHash": reflect.ValueOf(i14.RegisterHash),
		"SHA1": reflect.ValueOf(i14.SHA1),
		"SHA224": reflect.ValueOf(i14.SHA224),
		"SHA256": reflect.ValueOf(i14.SHA256),
		"SHA384": reflect.ValueOf(i14.SHA384),
		"SHA3_224": reflect.ValueOf(i14.SHA3_224),
		"SHA3_256": reflect.ValueOf(i14.SHA3_256),
		"SHA3_384": reflect.ValueOf(i14.SHA3_384),
		"SHA3_512": reflect.ValueOf(i14.SHA3_512),
		"SHA512": reflect.ValueOf(i14.SHA512),
		"SHA512_224": reflect.ValueOf(i14.SHA512_224),
		"SHA512_256": reflect.ValueOf(i14.SHA512_256),
		"SignMessage": reflect.ValueOf(i14.SignMessage),
	}
	stdfuncs["crypto/aes"] = map[string]reflect.Value{
		"BlockSize": reflect.ValueOf(i15.BlockSize),
		"NewCipher": reflect.ValueOf(i15.NewCipher),
	}
	stdfuncs["crypto/cipher"] = map[string]reflect.Value{
		"NewCBCDecrypter": reflect.ValueOf(i16.NewCBCDecrypter),
		"NewCBCEncrypter": reflect.ValueOf(i16.NewCBCEncrypter),
		"NewCFBDecrypter": reflect.ValueOf(i16.NewCFBDecrypter),
		"NewCFBEncrypter": reflect.ValueOf(i16.NewCFBEncrypter),
		"NewCTR": reflect.ValueOf(i16.NewCTR),
		"NewGCM": reflect.ValueOf(i16.NewGCM),
		"NewGCMWithNonceSize": reflect.ValueOf(i16.NewGCMWithNonceSize),
		"NewGCMWithRandomNonce": reflect.ValueOf(i16.NewGCMWithRandomNonce),
		"NewGCMWithTagSize": reflect.ValueOf(i16.NewGCMWithTagSize),
		"NewOFB": reflect.ValueOf(i16.NewOFB),
	}
	stdfuncs["crypto/des"] = map[string]reflect.Value{
		"BlockSize": reflect.ValueOf(i17.BlockSize),
		"NewCipher": reflect.ValueOf(i17.NewCipher),
		"NewTripleDESCipher": reflect.ValueOf(i17.NewTripleDESCipher),
	}
	stdfuncs["crypto/dsa"] = map[string]reflect.Value{
		"ErrInvalidPublicKey": reflect.ValueOf(i18.ErrInvalidPublicKey),
		"GenerateKey": reflect.ValueOf(i18.GenerateKey),
		"GenerateParameters": reflect.ValueOf(i18.GenerateParameters),
		"L1024N160": reflect.ValueOf(i18.L1024N160),
		"L2048N224": reflect.ValueOf(i18.L2048N224),
		"L2048N256": reflect.ValueOf(i18.L2048N256),
		"L3072N256": reflect.ValueOf(i18.L3072N256),
		"Sign": reflect.ValueOf(i18.Sign),
		"Verify": reflect.ValueOf(i18.Verify),
	}
	stdfuncs["crypto/ecdsa"] = map[string]reflect.Value{
		"GenerateKey": reflect.ValueOf(i19.GenerateKey),
		"ParseRawPrivateKey": reflect.ValueOf(i19.ParseRawPrivateKey),
		"ParseUncompressedPublicKey": reflect.ValueOf(i19.ParseUncompressedPublicKey),
		"Sign": reflect.ValueOf(i19.Sign),
		"SignASN1": reflect.ValueOf(i19.SignASN1),
		"Verify": reflect.ValueOf(i19.Verify),
		"VerifyASN1": reflect.ValueOf(i19.VerifyASN1),
	}
	stdfuncs["crypto/ed25519"] = map[string]reflect.Value{
		"GenerateKey": reflect.ValueOf(i20.GenerateKey),
		"NewKeyFromSeed": reflect.ValueOf(i20.NewKeyFromSeed),
		"PrivateKeySize": reflect.ValueOf(i20.PrivateKeySize),
		"PublicKeySize": reflect.ValueOf(i20.PublicKeySize),
		"SeedSize": reflect.ValueOf(i20.SeedSize),
		"Sign": reflect.ValueOf(i20.Sign),
		"SignatureSize": reflect.ValueOf(i20.SignatureSize),
		"Verify": reflect.ValueOf(i20.Verify),
		"VerifyWithOptions": reflect.ValueOf(i20.VerifyWithOptions),
	}
	stdfuncs["crypto/elliptic"] = map[string]reflect.Value{
		"GenerateKey": reflect.ValueOf(i21.GenerateKey),
		"Marshal": reflect.ValueOf(i21.Marshal),
		"MarshalCompressed": reflect.ValueOf(i21.MarshalCompressed),
		"P224": reflect.ValueOf(i21.P224),
		"P256": reflect.ValueOf(i21.P256),
		"P384": reflect.ValueOf(i21.P384),
		"P521": reflect.ValueOf(i21.P521),
		"Unmarshal": reflect.ValueOf(i21.Unmarshal),
		"UnmarshalCompressed": reflect.ValueOf(i21.UnmarshalCompressed),
	}
	stdfuncs["crypto/hmac"] = map[string]reflect.Value{
		"Equal": reflect.ValueOf(i22.Equal),
		"New": reflect.ValueOf(i22.New),
	}
	stdfuncs["crypto/md5"] = map[string]reflect.Value{
		"BlockSize": reflect.ValueOf(i23.BlockSize),
		"New": reflect.ValueOf(i23.New),
		"Size": reflect.ValueOf(i23.Size),
		"Sum": reflect.ValueOf(i23.Sum),
	}
	stdfuncs["crypto/rand"] = map[string]reflect.Value{
		"Int": reflect.ValueOf(i24.Int),
		"Prime": reflect.ValueOf(i24.Prime),
		"Read": reflect.ValueOf(i24.Read),
		"Reader": reflect.ValueOf(i24.Reader),
		"Text": reflect.ValueOf(i24.Text),
	}
	stdfuncs["crypto/rc4"] = map[string]reflect.Value{
		"NewCipher": reflect.ValueOf(i25.NewCipher),
	}
	stdfuncs["crypto/rsa"] = map[string]reflect.Value{
		"DecryptOAEP": reflect.ValueOf(i26.DecryptOAEP),
		"DecryptPKCS1v15": reflect.ValueOf(i26.DecryptPKCS1v15),
		"DecryptPKCS1v15SessionKey": reflect.ValueOf(i26.DecryptPKCS1v15SessionKey),
		"EncryptOAEP": reflect.ValueOf(i26.EncryptOAEP),
		"EncryptPKCS1v15": reflect.ValueOf(i26.EncryptPKCS1v15),
		"ErrDecryption": reflect.ValueOf(i26.ErrDecryption),
		"ErrMessageTooLong": reflect.ValueOf(i26.ErrMessageTooLong),
		"ErrVerification": reflect.ValueOf(i26.ErrVerification),
		"GenerateKey": reflect.ValueOf(i26.GenerateKey),
		"GenerateMultiPrimeKey": reflect.ValueOf(i26.GenerateMultiPrimeKey),
		"PSSSaltLengthAuto": reflect.ValueOf(i26.PSSSaltLengthAuto),
		"PSSSaltLengthEqualsHash": reflect.ValueOf(i26.PSSSaltLengthEqualsHash),
		"SignPKCS1v15": reflect.ValueOf(i26.SignPKCS1v15),
		"SignPSS": reflect.ValueOf(i26.SignPSS),
		"VerifyPKCS1v15": reflect.ValueOf(i26.VerifyPKCS1v15),
		"VerifyPSS": reflect.ValueOf(i26.VerifyPSS),
	}
	stdfuncs["crypto/sha1"] = map[string]reflect.Value{
		"BlockSize": reflect.ValueOf(i27.BlockSize),
		"New": reflect.ValueOf(i27.New),
		"Size": reflect.ValueOf(i27.Size),
		"Sum": reflect.ValueOf(i27.Sum),
	}
	stdfuncs["crypto/sha256"] = map[string]reflect.Value{
		"BlockSize": reflect.ValueOf(i28.BlockSize),
		"New": reflect.ValueOf(i28.New),
		"New224": reflect.ValueOf(i28.New224),
		"Size": reflect.ValueOf(i28.Size),
		"Size224": reflect.ValueOf(i28.Size224),
		"Sum224": reflect.ValueOf(i28.Sum224),
		"Sum256": reflect.ValueOf(i28.Sum256),
	}
	stdfuncs["crypto/sha512"] = map[string]reflect.Value{
		"BlockSize": reflect.ValueOf(i29.BlockSize),
		"New": reflect.ValueOf(i29.New),
		"New384": reflect.ValueOf(i29.New384),
		"New512_224": reflect.ValueOf(i29.New512_224),
		"New512_256": reflect.ValueOf(i29.New512_256),
		"Size": reflect.ValueOf(i29.Size),
		"Size224": reflect.ValueOf(i29.Size224),
		"Size256": reflect.ValueOf(i29.Size256),
		"Size384": reflect.ValueOf(i29.Size384),
		"Sum384": reflect.ValueOf(i29.Sum384),
		"Sum512": reflect.ValueOf(i29.Sum512),
		"Sum512_224": reflect.ValueOf(i29.Sum512_224),
		"Sum512_256": reflect.ValueOf(i29.Sum512_256),
	}
	stdfuncs["crypto/subtle"] = map[string]reflect.Value{
		"ConstantTimeByteEq": reflect.ValueOf(i30.ConstantTimeByteEq),
		"ConstantTimeCompare": reflect.ValueOf(i30.ConstantTimeCompare),
		"ConstantTimeCopy": reflect.ValueOf(i30.ConstantTimeCopy),
		"ConstantTimeEq": reflect.ValueOf(i30.ConstantTimeEq),
		"ConstantTimeLessOrEq": reflect.ValueOf(i30.ConstantTimeLessOrEq),
		"ConstantTimeSelect": reflect.ValueOf(i30.ConstantTimeSelect),
		"WithDataIndependentTiming": reflect.ValueOf(i30.WithDataIndependentTiming),
		"XORBytes": reflect.ValueOf(i30.XORBytes),
	}
	stdfuncs["crypto/tls"] = map[string]reflect.Value{
		"CipherSuiteName": reflect.ValueOf(i31.CipherSuiteName),
		"CipherSuites": reflect.ValueOf(i31.CipherSuites),
		"Client": reflect.ValueOf(i31.Client),
		"CurveP256": reflect.ValueOf(i31.CurveP256),
		"CurveP384": reflect.ValueOf(i31.CurveP384),
		"CurveP521": reflect.ValueOf(i31.CurveP521),
		"Dial": reflect.ValueOf(i31.Dial),
		"DialWithDialer": reflect.ValueOf(i31.DialWithDialer),
		"ECDSAWithP256AndSHA256": reflect.ValueOf(i31.ECDSAWithP256AndSHA256),
		"ECDSAWithP384AndSHA384": reflect.ValueOf(i31.ECDSAWithP384AndSHA384),
		"ECDSAWithP521AndSHA512": reflect.ValueOf(i31.ECDSAWithP521AndSHA512),
		"ECDSAWithSHA1": reflect.ValueOf(i31.ECDSAWithSHA1),
		"Ed25519": reflect.ValueOf(i31.Ed25519),
		"InsecureCipherSuites": reflect.ValueOf(i31.InsecureCipherSuites),
		"Listen": reflect.ValueOf(i31.Listen),
		"LoadX509KeyPair": reflect.ValueOf(i31.LoadX509KeyPair),
		"NewLRUClientSessionCache": reflect.ValueOf(i31.NewLRUClientSessionCache),
		"NewListener": reflect.ValueOf(i31.NewListener),
		"NewResumptionState": reflect.ValueOf(i31.NewResumptionState),
		"NoClientCert": reflect.ValueOf(i31.NoClientCert),
		"PKCS1WithSHA1": reflect.ValueOf(i31.PKCS1WithSHA1),
		"PKCS1WithSHA256": reflect.ValueOf(i31.PKCS1WithSHA256),
		"PKCS1WithSHA384": reflect.ValueOf(i31.PKCS1WithSHA384),
		"PKCS1WithSHA512": reflect.ValueOf(i31.PKCS1WithSHA512),
		"PSSWithSHA256": reflect.ValueOf(i31.PSSWithSHA256),
		"PSSWithSHA384": reflect.ValueOf(i31.PSSWithSHA384),
		"PSSWithSHA512": reflect.ValueOf(i31.PSSWithSHA512),
		"ParseSessionState": reflect.ValueOf(i31.ParseSessionState),
		"QUICClient": reflect.ValueOf(i31.QUICClient),
		"QUICEncryptionLevelApplication": reflect.ValueOf(i31.QUICEncryptionLevelApplication),
		"QUICEncryptionLevelEarly": reflect.ValueOf(i31.QUICEncryptionLevelEarly),
		"QUICEncryptionLevelHandshake": reflect.ValueOf(i31.QUICEncryptionLevelHandshake),
		"QUICEncryptionLevelInitial": reflect.ValueOf(i31.QUICEncryptionLevelInitial),
		"QUICHandshakeDone": reflect.ValueOf(i31.QUICHandshakeDone),
		"QUICNoEvent": reflect.ValueOf(i31.QUICNoEvent),
		"QUICRejectedEarlyData": reflect.ValueOf(i31.QUICRejectedEarlyData),
		"QUICResumeSession": reflect.ValueOf(i31.QUICResumeSession),
		"QUICServer": reflect.ValueOf(i31.QUICServer),
		"QUICSetReadSecret": reflect.ValueOf(i31.QUICSetReadSecret),
		"QUICSetWriteSecret": reflect.ValueOf(i31.QUICSetWriteSecret),
		"QUICStoreSession": reflect.ValueOf(i31.QUICStoreSession),
		"QUICTransportParameters": reflect.ValueOf(i31.QUICTransportParameters),
		"QUICTransportParametersRequired": reflect.ValueOf(i31.QUICTransportParametersRequired),
		"QUICWriteData": reflect.ValueOf(i31.QUICWriteData),
		"RenegotiateFreelyAsClient": reflect.ValueOf(i31.RenegotiateFreelyAsClient),
		"RenegotiateNever": reflect.ValueOf(i31.RenegotiateNever),
		"RenegotiateOnceAsClient": reflect.ValueOf(i31.RenegotiateOnceAsClient),
		"RequestClientCert": reflect.ValueOf(i31.RequestClientCert),
		"RequireAndVerifyClientCert": reflect.ValueOf(i31.RequireAndVerifyClientCert),
		"RequireAnyClientCert": reflect.ValueOf(i31.RequireAnyClientCert),
		"Server": reflect.ValueOf(i31.Server),
		"TLS_AES_128_GCM_SHA256": reflect.ValueOf(i31.TLS_AES_128_GCM_SHA256),
		"TLS_AES_256_GCM_SHA384": reflect.ValueOf(i31.TLS_AES_256_GCM_SHA384),
		"TLS_CHACHA20_POLY1305_SHA256": reflect.ValueOf(i31.TLS_CHACHA20_POLY1305_SHA256),
		"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA": reflect.ValueOf(i31.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA),
		"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256": reflect.ValueOf(i31.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256),
		"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256": reflect.ValueOf(i31.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256),
		"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA": reflect.ValueOf(i31.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA),
		"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384": reflect.ValueOf(i31.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384),
		"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305": reflect.ValueOf(i31.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305),
		"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256": reflect.ValueOf(i31.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256),
		"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA": reflect.ValueOf(i31.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA),
		"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA": reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA),
		"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA": reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA),
		"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256": reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256),
		"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256": reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256),
		"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA": reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA),
		"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384": reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384),
		"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305": reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305),
		"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256": reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256),
		"TLS_ECDHE_RSA_WITH_RC4_128_SHA": reflect.ValueOf(i31.TLS_ECDHE_RSA_WITH_RC4_128_SHA),
		"TLS_FALLBACK_SCSV": reflect.ValueOf(i31.TLS_FALLBACK_SCSV),
		"TLS_RSA_WITH_3DES_EDE_CBC_SHA": reflect.ValueOf(i31.TLS_RSA_WITH_3DES_EDE_CBC_SHA),
		"TLS_RSA_WITH_AES_128_CBC_SHA": reflect.ValueOf(i31.TLS_RSA_WITH_AES_128_CBC_SHA),
		"TLS_RSA_WITH_AES_128_CBC_SHA256": reflect.ValueOf(i31.TLS_RSA_WITH_AES_128_CBC_SHA256),
		"TLS_RSA_WITH_AES_128_GCM_SHA256": reflect.ValueOf(i31.TLS_RSA_WITH_AES_128_GCM_SHA256),
		"TLS_RSA_WITH_AES_256_CBC_SHA": reflect.ValueOf(i31.TLS_RSA_WITH_AES_256_CBC_SHA),
		"TLS_RSA_WITH_AES_256_GCM_SHA384": reflect.ValueOf(i31.TLS_RSA_WITH_AES_256_GCM_SHA384),
		"TLS_RSA_WITH_RC4_128_SHA": reflect.ValueOf(i31.TLS_RSA_WITH_RC4_128_SHA),
		"VerifyClientCertIfGiven": reflect.ValueOf(i31.VerifyClientCertIfGiven),
		"VersionName": reflect.ValueOf(i31.VersionName),
		"VersionSSL30": reflect.ValueOf(i31.VersionSSL30),
		"VersionTLS10": reflect.ValueOf(i31.VersionTLS10),
		"VersionTLS11": reflect.ValueOf(i31.VersionTLS11),
		"VersionTLS12": reflect.ValueOf(i31.VersionTLS12),
		"VersionTLS13": reflect.ValueOf(i31.VersionTLS13),
		"X25519": reflect.ValueOf(i31.X25519),
		"X25519MLKEM768": reflect.ValueOf(i31.X25519MLKEM768),
		"X509KeyPair": reflect.ValueOf(i31.X509KeyPair),
	}
	stdfuncs["crypto/x509"] = map[string]reflect.Value{
		"CANotAuthorizedForExtKeyUsage": reflect.ValueOf(i32.CANotAuthorizedForExtKeyUsage),
		"CANotAuthorizedForThisName": reflect.ValueOf(i32.CANotAuthorizedForThisName),
		"CreateCertificate": reflect.ValueOf(i32.CreateCertificate),
		"CreateCertificateRequest": reflect.ValueOf(i32.CreateCertificateRequest),
		"CreateRevocationList": reflect.ValueOf(i32.CreateRevocationList),
		"DSA": reflect.ValueOf(i32.DSA),
		"DSAWithSHA1": reflect.ValueOf(i32.DSAWithSHA1),
		"DSAWithSHA256": reflect.ValueOf(i32.DSAWithSHA256),
		"DecryptPEMBlock": reflect.ValueOf(i32.DecryptPEMBlock),
		"ECDSA": reflect.ValueOf(i32.ECDSA),
		"ECDSAWithSHA1": reflect.ValueOf(i32.ECDSAWithSHA1),
		"ECDSAWithSHA256": reflect.ValueOf(i32.ECDSAWithSHA256),
		"ECDSAWithSHA384": reflect.ValueOf(i32.ECDSAWithSHA384),
		"ECDSAWithSHA512": reflect.ValueOf(i32.ECDSAWithSHA512),
		"Ed25519": reflect.ValueOf(i32.Ed25519),
		"EncryptPEMBlock": reflect.ValueOf(i32.EncryptPEMBlock),
		"ErrUnsupportedAlgorithm": reflect.ValueOf(i32.ErrUnsupportedAlgorithm),
		"Expired": reflect.ValueOf(i32.Expired),
		"ExtKeyUsageAny": reflect.ValueOf(i32.ExtKeyUsageAny),
		"ExtKeyUsageClientAuth": reflect.ValueOf(i32.ExtKeyUsageClientAuth),
		"ExtKeyUsageCodeSigning": reflect.ValueOf(i32.ExtKeyUsageCodeSigning),
		"ExtKeyUsageEmailProtection": reflect.ValueOf(i32.ExtKeyUsageEmailProtection),
		"ExtKeyUsageIPSECEndSystem": reflect.ValueOf(i32.ExtKeyUsageIPSECEndSystem),
		"ExtKeyUsageIPSECTunnel": reflect.ValueOf(i32.ExtKeyUsageIPSECTunnel),
		"ExtKeyUsageIPSECUser": reflect.ValueOf(i32.ExtKeyUsageIPSECUser),
		"ExtKeyUsageMicrosoftCommercialCodeSigning": reflect.ValueOf(i32.ExtKeyUsageMicrosoftCommercialCodeSigning),
		"ExtKeyUsageMicrosoftKernelCodeSigning": reflect.ValueOf(i32.ExtKeyUsageMicrosoftKernelCodeSigning),
		"ExtKeyUsageMicrosoftServerGatedCrypto": reflect.ValueOf(i32.ExtKeyUsageMicrosoftServerGatedCrypto),
		"ExtKeyUsageNetscapeServerGatedCrypto": reflect.ValueOf(i32.ExtKeyUsageNetscapeServerGatedCrypto),
		"ExtKeyUsageOCSPSigning": reflect.ValueOf(i32.ExtKeyUsageOCSPSigning),
		"ExtKeyUsageServerAuth": reflect.ValueOf(i32.ExtKeyUsageServerAuth),
		"ExtKeyUsageTimeStamping": reflect.ValueOf(i32.ExtKeyUsageTimeStamping),
		"IncompatibleUsage": reflect.ValueOf(i32.IncompatibleUsage),
		"IncorrectPasswordError": reflect.ValueOf(i32.IncorrectPasswordError),
		"IsEncryptedPEMBlock": reflect.ValueOf(i32.IsEncryptedPEMBlock),
		"KeyUsageCRLSign": reflect.ValueOf(i32.KeyUsageCRLSign),
		"KeyUsageCertSign": reflect.ValueOf(i32.KeyUsageCertSign),
		"KeyUsageContentCommitment": reflect.ValueOf(i32.KeyUsageContentCommitment),
		"KeyUsageDataEncipherment": reflect.ValueOf(i32.KeyUsageDataEncipherment),
		"KeyUsageDecipherOnly": reflect.ValueOf(i32.KeyUsageDecipherOnly),
		"KeyUsageDigitalSignature": reflect.ValueOf(i32.KeyUsageDigitalSignature),
		"KeyUsageEncipherOnly": reflect.ValueOf(i32.KeyUsageEncipherOnly),
		"KeyUsageKeyAgreement": reflect.ValueOf(i32.KeyUsageKeyAgreement),
		"KeyUsageKeyEncipherment": reflect.ValueOf(i32.KeyUsageKeyEncipherment),
		"MD2WithRSA": reflect.ValueOf(i32.MD2WithRSA),
		"MD5WithRSA": reflect.ValueOf(i32.MD5WithRSA),
		"MarshalECPrivateKey": reflect.ValueOf(i32.MarshalECPrivateKey),
		"MarshalPKCS1PrivateKey": reflect.ValueOf(i32.MarshalPKCS1PrivateKey),
		"MarshalPKCS1PublicKey": reflect.ValueOf(i32.MarshalPKCS1PublicKey),
		"MarshalPKCS8PrivateKey": reflect.ValueOf(i32.MarshalPKCS8PrivateKey),
		"MarshalPKIXPublicKey": reflect.ValueOf(i32.MarshalPKIXPublicKey),
		"NameConstraintsWithoutSANs": reflect.ValueOf(i32.NameConstraintsWithoutSANs),
		"NameMismatch": reflect.ValueOf(i32.NameMismatch),
		"NewCertPool": reflect.ValueOf(i32.NewCertPool),
		"NoValidChains": reflect.ValueOf(i32.NoValidChains),
		"NotAuthorizedToSign": reflect.ValueOf(i32.NotAuthorizedToSign),
		"OIDFromInts": reflect.ValueOf(i32.OIDFromInts),
		"PEMCipher3DES": reflect.ValueOf(i32.PEMCipher3DES),
		"PEMCipherAES128": reflect.ValueOf(i32.PEMCipherAES128),
		"PEMCipherAES192": reflect.ValueOf(i32.PEMCipherAES192),
		"PEMCipherAES256": reflect.ValueOf(i32.PEMCipherAES256),
		"PEMCipherDES": reflect.ValueOf(i32.PEMCipherDES),
		"ParseCRL": reflect.ValueOf(i32.ParseCRL),
		"ParseCertificate": reflect.ValueOf(i32.ParseCertificate),
		"ParseCertificateRequest": reflect.ValueOf(i32.ParseCertificateRequest),
		"ParseCertificates": reflect.ValueOf(i32.ParseCertificates),
		"ParseDERCRL": reflect.ValueOf(i32.ParseDERCRL),
		"ParseECPrivateKey": reflect.ValueOf(i32.ParseECPrivateKey),
		"ParseOID": reflect.ValueOf(i32.ParseOID),
		"ParsePKCS1PrivateKey": reflect.ValueOf(i32.ParsePKCS1PrivateKey),
		"ParsePKCS1PublicKey": reflect.ValueOf(i32.ParsePKCS1PublicKey),
		"ParsePKCS8PrivateKey": reflect.ValueOf(i32.ParsePKCS8PrivateKey),
		"ParsePKIXPublicKey": reflect.ValueOf(i32.ParsePKIXPublicKey),
		"ParseRevocationList": reflect.ValueOf(i32.ParseRevocationList),
		"PureEd25519": reflect.ValueOf(i32.PureEd25519),
		"RSA": reflect.ValueOf(i32.RSA),
		"SHA1WithRSA": reflect.ValueOf(i32.SHA1WithRSA),
		"SHA256WithRSA": reflect.ValueOf(i32.SHA256WithRSA),
		"SHA256WithRSAPSS": reflect.ValueOf(i32.SHA256WithRSAPSS),
		"SHA384WithRSA": reflect.ValueOf(i32.SHA384WithRSA),
		"SHA384WithRSAPSS": reflect.ValueOf(i32.SHA384WithRSAPSS),
		"SHA512WithRSA": reflect.ValueOf(i32.SHA512WithRSA),
		"SHA512WithRSAPSS": reflect.ValueOf(i32.SHA512WithRSAPSS),
		"SetFallbackRoots": reflect.ValueOf(i32.SetFallbackRoots),
		"SystemCertPool": reflect.ValueOf(i32.SystemCertPool),
		"TooManyConstraints": reflect.ValueOf(i32.TooManyConstraints),
		"TooManyIntermediates": reflect.ValueOf(i32.TooManyIntermediates),
		"UnconstrainedName": reflect.ValueOf(i32.UnconstrainedName),
		"UnknownPublicKeyAlgorithm": reflect.ValueOf(i32.UnknownPublicKeyAlgorithm),
		"UnknownSignatureAlgorithm": reflect.ValueOf(i32.UnknownSignatureAlgorithm),
	}
	stdfuncs["database/sql"] = map[string]reflect.Value{
		"Drivers": reflect.ValueOf(i33.Drivers),
		"ErrConnDone": reflect.ValueOf(i33.ErrConnDone),
		"ErrNoRows": reflect.ValueOf(i33.ErrNoRows),
		"ErrTxDone": reflect.ValueOf(i33.ErrTxDone),
		"LevelDefault": reflect.ValueOf(i33.LevelDefault),
		"LevelLinearizable": reflect.ValueOf(i33.LevelLinearizable),
		"LevelReadCommitted": reflect.ValueOf(i33.LevelReadCommitted),
		"LevelReadUncommitted": reflect.ValueOf(i33.LevelReadUncommitted),
		"LevelRepeatableRead": reflect.ValueOf(i33.LevelRepeatableRead),
		"LevelSerializable": reflect.ValueOf(i33.LevelSerializable),
		"LevelSnapshot": reflect.ValueOf(i33.LevelSnapshot),
		"LevelWriteCommitted": reflect.ValueOf(i33.LevelWriteCommitted),
		"Named": reflect.ValueOf(i33.Named),
		"Open": reflect.ValueOf(i33.Open),
		"OpenDB": reflect.ValueOf(i33.OpenDB),
		"Register": reflect.ValueOf(i33.Register),
	}
	stdfuncs["database/sql/driver"] = map[string]reflect.Value{
		"Bool": reflect.ValueOf(i34.Bool),
		"DefaultParameterConverter": reflect.ValueOf(i34.DefaultParameterConverter),
		"ErrBadConn": reflect.ValueOf(i34.ErrBadConn),
		"ErrRemoveArgument": reflect.ValueOf(i34.ErrRemoveArgument),
		"ErrSkip": reflect.ValueOf(i34.ErrSkip),
		"Int32": reflect.ValueOf(i34.Int32),
		"IsScanValue": reflect.ValueOf(i34.IsScanValue),
		"IsValue": reflect.ValueOf(i34.IsValue),
		"ResultNoRows": reflect.ValueOf(i34.ResultNoRows),
		"String": reflect.ValueOf(i34.String),
	}
	stdfuncs["encoding/ascii85"] = map[string]reflect.Value{
		"Decode": reflect.ValueOf(i35.Decode),
		"Encode": reflect.ValueOf(i35.Encode),
		"MaxEncodedLen": reflect.ValueOf(i35.MaxEncodedLen),
		"NewDecoder": reflect.ValueOf(i35.NewDecoder),
		"NewEncoder": reflect.ValueOf(i35.NewEncoder),
	}
	stdfuncs["encoding/asn1"] = map[string]reflect.Value{
		"ClassApplication": reflect.ValueOf(i36.ClassApplication),
		"ClassContextSpecific": reflect.ValueOf(i36.ClassContextSpecific),
		"ClassPrivate": reflect.ValueOf(i36.ClassPrivate),
		"ClassUniversal": reflect.ValueOf(i36.ClassUniversal),
		"Marshal": reflect.ValueOf(i36.Marshal),
		"MarshalWithParams": reflect.ValueOf(i36.MarshalWithParams),
		"NullBytes": reflect.ValueOf(i36.NullBytes),
		"NullRawValue": reflect.ValueOf(i36.NullRawValue),
		"TagBMPString": reflect.ValueOf(i36.TagBMPString),
		"TagBitString": reflect.ValueOf(i36.TagBitString),
		"TagBoolean": reflect.ValueOf(i36.TagBoolean),
		"TagEnum": reflect.ValueOf(i36.TagEnum),
		"TagGeneralString": reflect.ValueOf(i36.TagGeneralString),
		"TagGeneralizedTime": reflect.ValueOf(i36.TagGeneralizedTime),
		"TagIA5String": reflect.ValueOf(i36.TagIA5String),
		"TagInteger": reflect.ValueOf(i36.TagInteger),
		"TagNull": reflect.ValueOf(i36.TagNull),
		"TagNumericString": reflect.ValueOf(i36.TagNumericString),
		"TagOID": reflect.ValueOf(i36.TagOID),
		"TagOctetString": reflect.ValueOf(i36.TagOctetString),
		"TagPrintableString": reflect.ValueOf(i36.TagPrintableString),
		"TagSequence": reflect.ValueOf(i36.TagSequence),
		"TagSet": reflect.ValueOf(i36.TagSet),
		"TagT61String": reflect.ValueOf(i36.TagT61String),
		"TagUTCTime": reflect.ValueOf(i36.TagUTCTime),
		"TagUTF8String": reflect.ValueOf(i36.TagUTF8String),
		"Unmarshal": reflect.ValueOf(i36.Unmarshal),
		"UnmarshalWithParams": reflect.ValueOf(i36.UnmarshalWithParams),
	}
	stdfuncs["encoding/base32"] = map[string]reflect.Value{
		"HexEncoding": reflect.ValueOf(i37.HexEncoding),
		"NewDecoder": reflect.ValueOf(i37.NewDecoder),
		"NewEncoder": reflect.ValueOf(i37.NewEncoder),
		"NewEncoding": reflect.ValueOf(i37.NewEncoding),
		"NoPadding": reflect.ValueOf(i37.NoPadding),
		"StdEncoding": reflect.ValueOf(i37.StdEncoding),
		"StdPadding": reflect.ValueOf(i37.StdPadding),
	}
	stdfuncs["encoding/base64"] = map[string]reflect.Value{
		"NewDecoder": reflect.ValueOf(i38.NewDecoder),
		"NewEncoder": reflect.ValueOf(i38.NewEncoder),
		"NewEncoding": reflect.ValueOf(i38.NewEncoding),
		"NoPadding": reflect.ValueOf(i38.NoPadding),
		"RawStdEncoding": reflect.ValueOf(i38.RawStdEncoding),
		"RawURLEncoding": reflect.ValueOf(i38.RawURLEncoding),
		"StdEncoding": reflect.ValueOf(i38.StdEncoding),
		"StdPadding": reflect.ValueOf(i38.StdPadding),
		"URLEncoding": reflect.ValueOf(i38.URLEncoding),
	}
	stdfuncs["encoding/binary"] = map[string]reflect.Value{
		"Append": reflect.ValueOf(i39.Append),
		"AppendUvarint": reflect.ValueOf(i39.AppendUvarint),
		"AppendVarint": reflect.ValueOf(i39.AppendVarint),
		"BigEndian": reflect.ValueOf(i39.BigEndian),
		"Decode": reflect.ValueOf(i39.Decode),
		"Encode": reflect.ValueOf(i39.Encode),
		"LittleEndian": reflect.ValueOf(i39.LittleEndian),
		"MaxVarintLen16": reflect.ValueOf(i39.MaxVarintLen16),
		"MaxVarintLen32": reflect.ValueOf(i39.MaxVarintLen32),
		"MaxVarintLen64": reflect.ValueOf(i39.MaxVarintLen64),
		"NativeEndian": reflect.ValueOf(i39.NativeEndian),
		"PutUvarint": reflect.ValueOf(i39.PutUvarint),
		"PutVarint": reflect.ValueOf(i39.PutVarint),
		"Read": reflect.ValueOf(i39.Read),
		"ReadUvarint": reflect.ValueOf(i39.ReadUvarint),
		"ReadVarint": reflect.ValueOf(i39.ReadVarint),
		"Size": reflect.ValueOf(i39.Size),
		"Uvarint": reflect.ValueOf(i39.Uvarint),
		"Varint": reflect.ValueOf(i39.Varint),
		"Write": reflect.ValueOf(i39.Write),
	}
	stdfuncs["encoding/csv"] = map[string]reflect.Value{
		"ErrBareQuote": reflect.ValueOf(i40.ErrBareQuote),
		"ErrFieldCount": reflect.ValueOf(i40.ErrFieldCount),
		"ErrQuote": reflect.ValueOf(i40.ErrQuote),
		"ErrTrailingComma": reflect.ValueOf(i40.ErrTrailingComma),
		"NewReader": reflect.ValueOf(i40.NewReader),
		"NewWriter": reflect.ValueOf(i40.NewWriter),
	}
	stdfuncs["encoding/gob"] = map[string]reflect.Value{
		"NewDecoder": reflect.ValueOf(i41.NewDecoder),
		"NewEncoder": reflect.ValueOf(i41.NewEncoder),
		"Register": reflect.ValueOf(i41.Register),
		"RegisterName": reflect.ValueOf(i41.RegisterName),
	}
	stdfuncs["encoding/hex"] = map[string]reflect.Value{
		"AppendDecode": reflect.ValueOf(i42.AppendDecode),
		"AppendEncode": reflect.ValueOf(i42.AppendEncode),
		"Decode": reflect.ValueOf(i42.Decode),
		"DecodeString": reflect.ValueOf(i42.DecodeString),
		"DecodedLen": reflect.ValueOf(i42.DecodedLen),
		"Dump": reflect.ValueOf(i42.Dump),
		"Dumper": reflect.ValueOf(i42.Dumper),
		"Encode": reflect.ValueOf(i42.Encode),
		"EncodeToString": reflect.ValueOf(i42.EncodeToString),
		"EncodedLen": reflect.ValueOf(i42.EncodedLen),
		"ErrLength": reflect.ValueOf(i42.ErrLength),
		"NewDecoder": reflect.ValueOf(i42.NewDecoder),
		"NewEncoder": reflect.ValueOf(i42.NewEncoder),
	}
	stdfuncs["encoding/json"] = map[string]reflect.Value{
		"Compact": reflect.ValueOf(i43.Compact),
		"HTMLEscape": reflect.ValueOf(i43.HTMLEscape),
		"Indent": reflect.ValueOf(i43.Indent),
		"Marshal": reflect.ValueOf(i43.Marshal),
		"MarshalIndent": reflect.ValueOf(i43.MarshalIndent),
		"NewDecoder": reflect.ValueOf(i43.NewDecoder),
		"NewEncoder": reflect.ValueOf(i43.NewEncoder),
		"Unmarshal": reflect.ValueOf(i43.Unmarshal),
		"Valid": reflect.ValueOf(i43.Valid),
	}
	stdfuncs["encoding/pem"] = map[string]reflect.Value{
		"Decode": reflect.ValueOf(i44.Decode),
		"Encode": reflect.ValueOf(i44.Encode),
		"EncodeToMemory": reflect.ValueOf(i44.EncodeToMemory),
	}
	stdfuncs["encoding/xml"] = map[string]reflect.Value{
		"CopyToken": reflect.ValueOf(i45.CopyToken),
		"Escape": reflect.ValueOf(i45.Escape),
		"EscapeText": reflect.ValueOf(i45.EscapeText),
		"HTMLAutoClose": reflect.ValueOf(i45.HTMLAutoClose),
		"HTMLEntity": reflect.ValueOf(i45.HTMLEntity),
		"Header": reflect.ValueOf(i45.Header),
		"Marshal": reflect.ValueOf(i45.Marshal),
		"MarshalIndent": reflect.ValueOf(i45.MarshalIndent),
		"NewDecoder": reflect.ValueOf(i45.NewDecoder),
		"NewEncoder": reflect.ValueOf(i45.NewEncoder),
		"NewTokenDecoder": reflect.ValueOf(i45.NewTokenDecoder),
		"Unmarshal": reflect.ValueOf(i45.Unmarshal),
	}
	stdfuncs["errors"] = map[string]reflect.Value{
		"As": reflect.ValueOf(i46.As),
		"ErrUnsupported": reflect.ValueOf(i46.ErrUnsupported),
		"Is": reflect.ValueOf(i46.Is),
		"Join": reflect.ValueOf(i46.Join),
		"New": reflect.ValueOf(i46.New),
		"Unwrap": reflect.ValueOf(i46.Unwrap),
	}
	stdfuncs["expvar"] = map[string]reflect.Value{
		"Do": reflect.ValueOf(i47.Do),
		"Get": reflect.ValueOf(i47.Get),
		"Handler": reflect.ValueOf(i47.Handler),
		"NewFloat": reflect.ValueOf(i47.NewFloat),
		"NewInt": reflect.ValueOf(i47.NewInt),
		"NewMap": reflect.ValueOf(i47.NewMap),
		"NewString": reflect.ValueOf(i47.NewString),
		"Publish": reflect.ValueOf(i47.Publish),
	}
	stdfuncs["flag"] = map[string]reflect.Value{
		"Arg": reflect.ValueOf(i48.Arg),
		"Args": reflect.ValueOf(i48.Args),
		"Bool": reflect.ValueOf(i48.Bool),
		"BoolFunc": reflect.ValueOf(i48.BoolFunc),
		"BoolVar": reflect.ValueOf(i48.BoolVar),
		"CommandLine": reflect.ValueOf(i48.CommandLine),
		"ContinueOnError": reflect.ValueOf(i48.ContinueOnError),
		"Duration": reflect.ValueOf(i48.Duration),
		"DurationVar": reflect.ValueOf(i48.DurationVar),
		"ErrHelp": reflect.ValueOf(i48.ErrHelp),
		"ExitOnError": reflect.ValueOf(i48.ExitOnError),
		"Float64": reflect.ValueOf(i48.Float64),
		"Float64Var": reflect.ValueOf(i48.Float64Var),
		"Func": reflect.ValueOf(i48.Func),
		"Int": reflect.ValueOf(i48.Int),
		"Int64": reflect.ValueOf(i48.Int64),
		"Int64Var": reflect.ValueOf(i48.Int64Var),
		"IntVar": reflect.ValueOf(i48.IntVar),
		"Lookup": reflect.ValueOf(i48.Lookup),
		"NArg": reflect.ValueOf(i48.NArg),
		"NFlag": reflect.ValueOf(i48.NFlag),
		"NewFlagSet": reflect.ValueOf(i48.NewFlagSet),
		"PanicOnError": reflect.ValueOf(i48.PanicOnError),
		"Parse": reflect.ValueOf(i48.Parse),
		"Parsed": reflect.ValueOf(i48.Parsed),
		"PrintDefaults": reflect.ValueOf(i48.PrintDefaults),
		"Set": reflect.ValueOf(i48.Set),
		"String": reflect.ValueOf(i48.String),
		"StringVar": reflect.ValueOf(i48.StringVar),
		"TextVar": reflect.ValueOf(i48.TextVar),
		"Uint": reflect.ValueOf(i48.Uint),
		"Uint64": reflect.ValueOf(i48.Uint64),
		"Uint64Var": reflect.ValueOf(i48.Uint64Var),
		"UintVar": reflect.ValueOf(i48.UintVar),
		"UnquoteUsage": reflect.ValueOf(i48.UnquoteUsage),
		"Usage": reflect.ValueOf(i48.Usage),
		"Var": reflect.ValueOf(i48.Var),
		"Visit": reflect.ValueOf(i48.Visit),
		"VisitAll": reflect.ValueOf(i48.VisitAll),
	}
	stdfuncs["fmt"] = map[string]reflect.Value{
		"Append": reflect.ValueOf(i49.Append),
		"Appendf": reflect.ValueOf(i49.Appendf),
		"Appendln": reflect.ValueOf(i49.Appendln),
		"Errorf": reflect.ValueOf(i49.Errorf),
		"FormatString": reflect.ValueOf(i49.FormatString),
		"Fprint": reflect.ValueOf(i49.Fprint),
		"Fprintf": reflect.ValueOf(i49.Fprintf),
		"Fprintln": reflect.ValueOf(i49.Fprintln),
		"Fscan": reflect.ValueOf(i49.Fscan),
		"Fscanf": reflect.ValueOf(i49.Fscanf),
		"Fscanln": reflect.ValueOf(i49.Fscanln),
		"Print": reflect.ValueOf(i49.Print),
		"Printf": reflect.ValueOf(i49.Printf),
		"Println": reflect.ValueOf(i49.Println),
		"Scan": reflect.ValueOf(i49.Scan),
		"Scanf": reflect.ValueOf(i49.Scanf),
		"Scanln": reflect.ValueOf(i49.Scanln),
		"Sprint": reflect.ValueOf(i49.Sprint),
		"Sprintf": reflect.ValueOf(i49.Sprintf),
		"Sprintln": reflect.ValueOf(i49.Sprintln),
		"Sscan": reflect.ValueOf(i49.Sscan),
		"Sscanf": reflect.ValueOf(i49.Sscanf),
		"Sscanln": reflect.ValueOf(i49.Sscanln),
	}
	stdfuncs["hash/adler32"] = map[string]reflect.Value{
		"Checksum": reflect.ValueOf(i50.Checksum),
		"New": reflect.ValueOf(i50.New),
		"Size": reflect.ValueOf(i50.Size),
	}
	stdfuncs["hash/crc32"] = map[string]reflect.Value{
		"Castagnoli": reflect.ValueOf(i51.Castagnoli),
		"Checksum": reflect.ValueOf(i51.Checksum),
		"ChecksumIEEE": reflect.ValueOf(i51.ChecksumIEEE),
		"IEEE": reflect.ValueOf(i51.IEEE),
		"IEEETable": reflect.ValueOf(i51.IEEETable),
		"Koopman": reflect.ValueOf(i51.Koopman),
		"MakeTable": reflect.ValueOf(i51.MakeTable),
		"New": reflect.ValueOf(i51.New),
		"NewIEEE": reflect.ValueOf(i51.NewIEEE),
		"Size": reflect.ValueOf(i51.Size),
		"Update": reflect.ValueOf(i51.Update),
	}
	stdfuncs["hash/crc64"] = map[string]reflect.Value{
		"Checksum": reflect.ValueOf(i52.Checksum),
		"MakeTable": reflect.ValueOf(i52.MakeTable),
		"New": reflect.ValueOf(i52.New),
		"Size": reflect.ValueOf(i52.Size),
		"Update": reflect.ValueOf(i52.Update),
	}
	stdfuncs["hash/fnv"] = map[string]reflect.Value{
		"New128": reflect.ValueOf(i53.New128),
		"New128a": reflect.ValueOf(i53.New128a),
		"New32": reflect.ValueOf(i53.New32),
		"New32a": reflect.ValueOf(i53.New32a),
		"New64": reflect.ValueOf(i53.New64),
		"New64a": reflect.ValueOf(i53.New64a),
	}
	stdfuncs["hash/maphash"] = map[string]reflect.Value{
		"Bytes": reflect.ValueOf(i54.Bytes),
		"MakeSeed": reflect.ValueOf(i54.MakeSeed),
		"String": reflect.ValueOf(i54.String),
	}
	stdfuncs["html"] = map[string]reflect.Value{
		"EscapeString": reflect.ValueOf(i55.EscapeString),
		"UnescapeString": reflect.ValueOf(i55.UnescapeString),
	}
	stdfuncs["html/template"] = map[string]reflect.Value{
		"ErrAmbigContext": reflect.ValueOf(i56.ErrAmbigContext),
		"ErrBadHTML": reflect.ValueOf(i56.ErrBadHTML),
		"ErrBranchEnd": reflect.ValueOf(i56.ErrBranchEnd),
		"ErrEndContext": reflect.ValueOf(i56.ErrEndContext),
		"ErrJSTemplate": reflect.ValueOf(i56.ErrJSTemplate),
		"ErrNoSuchTemplate": reflect.ValueOf(i56.ErrNoSuchTemplate),
		"ErrOutputContext": reflect.ValueOf(i56.ErrOutputContext),
		"ErrPartialCharset": reflect.ValueOf(i56.ErrPartialCharset),
		"ErrPartialEscape": reflect.ValueOf(i56.ErrPartialEscape),
		"ErrPredefinedEscaper": reflect.ValueOf(i56.ErrPredefinedEscaper),
		"ErrRangeLoopReentry": reflect.ValueOf(i56.ErrRangeLoopReentry),
		"ErrSlashAmbig": reflect.ValueOf(i56.ErrSlashAmbig),
		"HTMLEscape": reflect.ValueOf(i56.HTMLEscape),
		"HTMLEscapeString": reflect.ValueOf(i56.HTMLEscapeString),
		"HTMLEscaper": reflect.ValueOf(i56.HTMLEscaper),
		"IsTrue": reflect.ValueOf(i56.IsTrue),
		"JSEscape": reflect.ValueOf(i56.JSEscape),
		"JSEscapeString": reflect.ValueOf(i56.JSEscapeString),
		"JSEscaper": reflect.ValueOf(i56.JSEscaper),
		"Must": reflect.ValueOf(i56.Must),
		"New": reflect.ValueOf(i56.New),
		"OK": reflect.ValueOf(i56.OK),
		"ParseFS": reflect.ValueOf(i56.ParseFS),
		"ParseFiles": reflect.ValueOf(i56.ParseFiles),
		"ParseGlob": reflect.ValueOf(i56.ParseGlob),
		"URLQueryEscaper": reflect.ValueOf(i56.URLQueryEscaper),
	}
	stdfuncs["image"] = map[string]reflect.Value{
		"Black": reflect.ValueOf(i57.Black),
		"Decode": reflect.ValueOf(i57.Decode),
		"DecodeConfig": reflect.ValueOf(i57.DecodeConfig),
		"ErrFormat": reflect.ValueOf(i57.ErrFormat),
		"NewAlpha": reflect.ValueOf(i57.NewAlpha),
		"NewAlpha16": reflect.ValueOf(i57.NewAlpha16),
		"NewCMYK": reflect.ValueOf(i57.NewCMYK),
		"NewGray": reflect.ValueOf(i57.NewGray),
		"NewGray16": reflect.ValueOf(i57.NewGray16),
		"NewNRGBA": reflect.ValueOf(i57.NewNRGBA),
		"NewNRGBA64": reflect.ValueOf(i57.NewNRGBA64),
		"NewNYCbCrA": reflect.ValueOf(i57.NewNYCbCrA),
		"NewPaletted": reflect.ValueOf(i57.NewPaletted),
		"NewRGBA": reflect.ValueOf(i57.NewRGBA),
		"NewRGBA64": reflect.ValueOf(i57.NewRGBA64),
		"NewUniform": reflect.ValueOf(i57.NewUniform),
		"NewYCbCr": reflect.ValueOf(i57.NewYCbCr),
		"Opaque": reflect.ValueOf(i57.Opaque),
		"Pt": reflect.ValueOf(i57.Pt),
		"Rect": reflect.ValueOf(i57.Rect),
		"RegisterFormat": reflect.ValueOf(i57.RegisterFormat),
		"Transparent": reflect.ValueOf(i57.Transparent),
		"White": reflect.ValueOf(i57.White),
		"YCbCrSubsampleRatio410": reflect.ValueOf(i57.YCbCrSubsampleRatio410),
		"YCbCrSubsampleRatio411": reflect.ValueOf(i57.YCbCrSubsampleRatio411),
		"YCbCrSubsampleRatio420": reflect.ValueOf(i57.YCbCrSubsampleRatio420),
		"YCbCrSubsampleRatio422": reflect.ValueOf(i57.YCbCrSubsampleRatio422),
		"YCbCrSubsampleRatio440": reflect.ValueOf(i57.YCbCrSubsampleRatio440),
		"YCbCrSubsampleRatio444": reflect.ValueOf(i57.YCbCrSubsampleRatio444),
		"ZP": reflect.ValueOf(i57.ZP),
		"ZR": reflect.ValueOf(i57.ZR),
	}
	stdfuncs["image/color"] = map[string]reflect.Value{
		"Alpha16Model": reflect.ValueOf(i58.Alpha16Model),
		"AlphaModel": reflect.ValueOf(i58.AlphaModel),
		"Black": reflect.ValueOf(i58.Black),
		"CMYKModel": reflect.ValueOf(i58.CMYKModel),
		"CMYKToRGB": reflect.ValueOf(i58.CMYKToRGB),
		"Gray16Model": reflect.ValueOf(i58.Gray16Model),
		"GrayModel": reflect.ValueOf(i58.GrayModel),
		"ModelFunc": reflect.ValueOf(i58.ModelFunc),
		"NRGBA64Model": reflect.ValueOf(i58.NRGBA64Model),
		"NRGBAModel": reflect.ValueOf(i58.NRGBAModel),
		"NYCbCrAModel": reflect.ValueOf(i58.NYCbCrAModel),
		"Opaque": reflect.ValueOf(i58.Opaque),
		"RGBA64Model": reflect.ValueOf(i58.RGBA64Model),
		"RGBAModel": reflect.ValueOf(i58.RGBAModel),
		"RGBToCMYK": reflect.ValueOf(i58.RGBToCMYK),
		"RGBToYCbCr": reflect.ValueOf(i58.RGBToYCbCr),
		"Transparent": reflect.ValueOf(i58.Transparent),
		"White": reflect.ValueOf(i58.White),
		"YCbCrModel": reflect.ValueOf(i58.YCbCrModel),
		"YCbCrToRGB": reflect.ValueOf(i58.YCbCrToRGB),
	}
	stdfuncs["image/color/palette"] = map[string]reflect.Value{
		"Plan9": reflect.ValueOf(i59.Plan9),
		"WebSafe": reflect.ValueOf(i59.WebSafe),
	}
	stdfuncs["image/draw"] = map[string]reflect.Value{
		"Draw": reflect.ValueOf(i60.Draw),
		"DrawMask": reflect.ValueOf(i60.DrawMask),
		"FloydSteinberg": reflect.ValueOf(i60.FloydSteinberg),
		"Over": reflect.ValueOf(i60.Over),
		"Src": reflect.ValueOf(i60.Src),
	}
	stdfuncs["image/gif"] = map[string]reflect.Value{
		"Decode": reflect.ValueOf(i61.Decode),
		"DecodeAll": reflect.ValueOf(i61.DecodeAll),
		"DecodeConfig": reflect.ValueOf(i61.DecodeConfig),
		"DisposalBackground": reflect.ValueOf(i61.DisposalBackground),
		"DisposalNone": reflect.ValueOf(i61.DisposalNone),
		"DisposalPrevious": reflect.ValueOf(i61.DisposalPrevious),
		"Encode": reflect.ValueOf(i61.Encode),
		"EncodeAll": reflect.ValueOf(i61.EncodeAll),
	}
	stdfuncs["image/jpeg"] = map[string]reflect.Value{
		"Decode": reflect.ValueOf(i62.Decode),
		"DecodeConfig": reflect.ValueOf(i62.DecodeConfig),
		"DefaultQuality": reflect.ValueOf(i62.DefaultQuality),
		"Encode": reflect.ValueOf(i62.Encode),
	}
	stdfuncs["image/png"] = map[string]reflect.Value{
		"BestCompression": reflect.ValueOf(i63.BestCompression),
		"BestSpeed": reflect.ValueOf(i63.BestSpeed),
		"Decode": reflect.ValueOf(i63.Decode),
		"DecodeConfig": reflect.ValueOf(i63.DecodeConfig),
		"DefaultCompression": reflect.ValueOf(i63.DefaultCompression),
		"Encode": reflect.ValueOf(i63.Encode),
		"NoCompression": reflect.ValueOf(i63.NoCompression),
	}
	stdfuncs["index/suffixarray"] = map[string]reflect.Value{
		"New": reflect.ValueOf(i64.New),
	}
	stdfuncs["io"] = map[string]reflect.Value{
		"Copy": reflect.ValueOf(i65.Copy),
		"CopyBuffer": reflect.ValueOf(i65.CopyBuffer),
		"CopyN": reflect.ValueOf(i65.CopyN),
		"Discard": reflect.ValueOf(i65.Discard),
		"EOF": reflect.ValueOf(i65.EOF),
		"ErrClosedPipe": reflect.ValueOf(i65.ErrClosedPipe),
		"ErrNoProgress": reflect.ValueOf(i65.ErrNoProgress),
		"ErrShortBuffer": reflect.ValueOf(i65.ErrShortBuffer),
		"ErrShortWrite": reflect.ValueOf(i65.ErrShortWrite),
		"ErrUnexpectedEOF": reflect.ValueOf(i65.ErrUnexpectedEOF),
		"LimitReader": reflect.ValueOf(i65.LimitReader),
		"MultiReader": reflect.ValueOf(i65.MultiReader),
		"MultiWriter": reflect.ValueOf(i65.MultiWriter),
		"NewOffsetWriter": reflect.ValueOf(i65.NewOffsetWriter),
		"NewSectionReader": reflect.ValueOf(i65.NewSectionReader),
		"NopCloser": reflect.ValueOf(i65.NopCloser),
		"Pipe": reflect.ValueOf(i65.Pipe),
		"ReadAll": reflect.ValueOf(i65.ReadAll),
		"ReadAtLeast": reflect.ValueOf(i65.ReadAtLeast),
		"ReadFull": reflect.ValueOf(i65.ReadFull),
		"SeekCurrent": reflect.ValueOf(i65.SeekCurrent),
		"SeekEnd": reflect.ValueOf(i65.SeekEnd),
		"SeekStart": reflect.ValueOf(i65.SeekStart),
		"TeeReader": reflect.ValueOf(i65.TeeReader),
		"WriteString": reflect.ValueOf(i65.WriteString),
	}
	stdfuncs["io/fs"] = map[string]reflect.Value{
		"ErrClosed": reflect.ValueOf(i66.ErrClosed),
		"ErrExist": reflect.ValueOf(i66.ErrExist),
		"ErrInvalid": reflect.ValueOf(i66.ErrInvalid),
		"ErrNotExist": reflect.ValueOf(i66.ErrNotExist),
		"ErrPermission": reflect.ValueOf(i66.ErrPermission),
		"FileInfoToDirEntry": reflect.ValueOf(i66.FileInfoToDirEntry),
		"FormatDirEntry": reflect.ValueOf(i66.FormatDirEntry),
		"FormatFileInfo": reflect.ValueOf(i66.FormatFileInfo),
		"Glob": reflect.ValueOf(i66.Glob),
		"Lstat": reflect.ValueOf(i66.Lstat),
		"ModeAppend": reflect.ValueOf(i66.ModeAppend),
		"ModeCharDevice": reflect.ValueOf(i66.ModeCharDevice),
		"ModeDevice": reflect.ValueOf(i66.ModeDevice),
		"ModeDir": reflect.ValueOf(i66.ModeDir),
		"ModeExclusive": reflect.ValueOf(i66.ModeExclusive),
		"ModeIrregular": reflect.ValueOf(i66.ModeIrregular),
		"ModeNamedPipe": reflect.ValueOf(i66.ModeNamedPipe),
		"ModePerm": reflect.ValueOf(i66.ModePerm),
		"ModeSetgid": reflect.ValueOf(i66.ModeSetgid),
		"ModeSetuid": reflect.ValueOf(i66.ModeSetuid),
		"ModeSocket": reflect.ValueOf(i66.ModeSocket),
		"ModeSticky": reflect.ValueOf(i66.ModeSticky),
		"ModeSymlink": reflect.ValueOf(i66.ModeSymlink),
		"ModeTemporary": reflect.ValueOf(i66.ModeTemporary),
		"ModeType": reflect.ValueOf(i66.ModeType),
		"ReadDir": reflect.ValueOf(i66.ReadDir),
		"ReadFile": reflect.ValueOf(i66.ReadFile),
		"ReadLink": reflect.ValueOf(i66.ReadLink),
		"SkipAll": reflect.ValueOf(i66.SkipAll),
		"SkipDir": reflect.ValueOf(i66.SkipDir),
		"Stat": reflect.ValueOf(i66.Stat),
		"Sub": reflect.ValueOf(i66.Sub),
		"ValidPath": reflect.ValueOf(i66.ValidPath),
		"WalkDir": reflect.ValueOf(i66.WalkDir),
	}
	stdfuncs["io/ioutil"] = map[string]reflect.Value{
		"Discard": reflect.ValueOf(i67.Discard),
		"NopCloser": reflect.ValueOf(i67.NopCloser),
		"ReadAll": reflect.ValueOf(i67.ReadAll),
		"ReadDir": reflect.ValueOf(i67.ReadDir),
		"ReadFile": reflect.ValueOf(i67.ReadFile),
		"TempDir": reflect.ValueOf(i67.TempDir),
		"TempFile": reflect.ValueOf(i67.TempFile),
		"WriteFile": reflect.ValueOf(i67.WriteFile),
	}
	stdfuncs["log"] = map[string]reflect.Value{
		"Default": reflect.ValueOf(i68.Default),
		"Fatal": reflect.ValueOf(i68.Fatal),
		"Fatalf": reflect.ValueOf(i68.Fatalf),
		"Fatalln": reflect.ValueOf(i68.Fatalln),
		"Flags": reflect.ValueOf(i68.Flags),
		"LUTC": reflect.ValueOf(i68.LUTC),
		"Ldate": reflect.ValueOf(i68.Ldate),
		"Llongfile": reflect.ValueOf(i68.Llongfile),
		"Lmicroseconds": reflect.ValueOf(i68.Lmicroseconds),
		"Lmsgprefix": reflect.ValueOf(i68.Lmsgprefix),
		"Lshortfile": reflect.ValueOf(i68.Lshortfile),
		"LstdFlags": reflect.ValueOf(i68.LstdFlags),
		"Ltime": reflect.ValueOf(i68.Ltime),
		"New": reflect.ValueOf(i68.New),
		"Output": reflect.ValueOf(i68.Output),
		"Panic": reflect.ValueOf(i68.Panic),
		"Panicf": reflect.ValueOf(i68.Panicf),
		"Panicln": reflect.ValueOf(i68.Panicln),
		"Prefix": reflect.ValueOf(i68.Prefix),
		"Print": reflect.ValueOf(i68.Print),
		"Printf": reflect.ValueOf(i68.Printf),
		"Println": reflect.ValueOf(i68.Println),
		"SetFlags": reflect.ValueOf(i68.SetFlags),
		"SetOutput": reflect.ValueOf(i68.SetOutput),
		"SetPrefix": reflect.ValueOf(i68.SetPrefix),
		"Writer": reflect.ValueOf(i68.Writer),
	}
	stdfuncs["log/slog"] = map[string]reflect.Value{
		"Any": reflect.ValueOf(i69.Any),
		"AnyValue": reflect.ValueOf(i69.AnyValue),
		"Bool": reflect.ValueOf(i69.Bool),
		"BoolValue": reflect.ValueOf(i69.BoolValue),
		"Debug": reflect.ValueOf(i69.Debug),
		"DebugContext": reflect.ValueOf(i69.DebugContext),
		"Default": reflect.ValueOf(i69.Default),
		"DiscardHandler": reflect.ValueOf(i69.DiscardHandler),
		"Duration": reflect.ValueOf(i69.Duration),
		"DurationValue": reflect.ValueOf(i69.DurationValue),
		"Error": reflect.ValueOf(i69.Error),
		"ErrorContext": reflect.ValueOf(i69.ErrorContext),
		"Float64": reflect.ValueOf(i69.Float64),
		"Float64Value": reflect.ValueOf(i69.Float64Value),
		"Group": reflect.ValueOf(i69.Group),
		"GroupAttrs": reflect.ValueOf(i69.GroupAttrs),
		"GroupValue": reflect.ValueOf(i69.GroupValue),
		"Info": reflect.ValueOf(i69.Info),
		"InfoContext": reflect.ValueOf(i69.InfoContext),
		"Int": reflect.ValueOf(i69.Int),
		"Int64": reflect.ValueOf(i69.Int64),
		"Int64Value": reflect.ValueOf(i69.Int64Value),
		"IntValue": reflect.ValueOf(i69.IntValue),
		"KindAny": reflect.ValueOf(i69.KindAny),
		"KindBool": reflect.ValueOf(i69.KindBool),
		"KindDuration": reflect.ValueOf(i69.KindDuration),
		"KindFloat64": reflect.ValueOf(i69.KindFloat64),
		"KindGroup": reflect.ValueOf(i69.KindGroup),
		"KindInt64": reflect.ValueOf(i69.KindInt64),
		"KindLogValuer": reflect.ValueOf(i69.KindLogValuer),
		"KindString": reflect.ValueOf(i69.KindString),
		"KindTime": reflect.ValueOf(i69.KindTime),
		"KindUint64": reflect.ValueOf(i69.KindUint64),
		"LevelDebug": reflect.ValueOf(i69.LevelDebug),
		"LevelError": reflect.ValueOf(i69.LevelError),
		"LevelInfo": reflect.ValueOf(i69.LevelInfo),
		"LevelKey": reflect.ValueOf(i69.LevelKey),
		"LevelWarn": reflect.ValueOf(i69.LevelWarn),
		"Log": reflect.ValueOf(i69.Log),
		"LogAttrs": reflect.ValueOf(i69.LogAttrs),
		"MessageKey": reflect.ValueOf(i69.MessageKey),
		"New": reflect.ValueOf(i69.New),
		"NewJSONHandler": reflect.ValueOf(i69.NewJSONHandler),
		"NewLogLogger": reflect.ValueOf(i69.NewLogLogger),
		"NewRecord": reflect.ValueOf(i69.NewRecord),
		"NewTextHandler": reflect.ValueOf(i69.NewTextHandler),
		"SetDefault": reflect.ValueOf(i69.SetDefault),
		"SetLogLoggerLevel": reflect.ValueOf(i69.SetLogLoggerLevel),
		"SourceKey": reflect.ValueOf(i69.SourceKey),
		"String": reflect.ValueOf(i69.String),
		"StringValue": reflect.ValueOf(i69.StringValue),
		"Time": reflect.ValueOf(i69.Time),
		"TimeKey": reflect.ValueOf(i69.TimeKey),
		"TimeValue": reflect.ValueOf(i69.TimeValue),
		"Uint64": reflect.ValueOf(i69.Uint64),
		"Uint64Value": reflect.ValueOf(i69.Uint64Value),
		"Warn": reflect.ValueOf(i69.Warn),
		"WarnContext": reflect.ValueOf(i69.WarnContext),
		"With": reflect.ValueOf(i69.With),
	}
	stdfuncs["log/syslog"] = map[string]reflect.Value{
		"Dial": reflect.ValueOf(i70.Dial),
		"LOG_ALERT": reflect.ValueOf(i70.LOG_ALERT),
		"LOG_AUTH": reflect.ValueOf(i70.LOG_AUTH),
		"LOG_AUTHPRIV": reflect.ValueOf(i70.LOG_AUTHPRIV),
		"LOG_CRIT": reflect.ValueOf(i70.LOG_CRIT),
		"LOG_CRON": reflect.ValueOf(i70.LOG_CRON),
		"LOG_DAEMON": reflect.ValueOf(i70.LOG_DAEMON),
		"LOG_DEBUG": reflect.ValueOf(i70.LOG_DEBUG),
		"LOG_EMERG": reflect.ValueOf(i70.LOG_EMERG),
		"LOG_ERR": reflect.ValueOf(i70.LOG_ERR),
		"LOG_FTP": reflect.ValueOf(i70.LOG_FTP),
		"LOG_INFO": reflect.ValueOf(i70.LOG_INFO),
		"LOG_KERN": reflect.ValueOf(i70.LOG_KERN),
		"LOG_LOCAL0": reflect.ValueOf(i70.LOG_LOCAL0),
		"LOG_LOCAL1": reflect.ValueOf(i70.LOG_LOCAL1),
		"LOG_LOCAL2": reflect.ValueOf(i70.LOG_LOCAL2),
		"LOG_LOCAL3": reflect.ValueOf(i70.LOG_LOCAL3),
		"LOG_LOCAL4": reflect.ValueOf(i70.LOG_LOCAL4),
		"LOG_LOCAL5": reflect.ValueOf(i70.LOG_LOCAL5),
		"LOG_LOCAL6": reflect.ValueOf(i70.LOG_LOCAL6),
		"LOG_LOCAL7": reflect.ValueOf(i70.LOG_LOCAL7),
		"LOG_LPR": reflect.ValueOf(i70.LOG_LPR),
		"LOG_MAIL": reflect.ValueOf(i70.LOG_MAIL),
		"LOG_NEWS": reflect.ValueOf(i70.LOG_NEWS),
		"LOG_NOTICE": reflect.ValueOf(i70.LOG_NOTICE),
		"LOG_SYSLOG": reflect.ValueOf(i70.LOG_SYSLOG),
		"LOG_USER": reflect.ValueOf(i70.LOG_USER),
		"LOG_UUCP": reflect.ValueOf(i70.LOG_UUCP),
		"LOG_WARNING": reflect.ValueOf(i70.LOG_WARNING),
		"New": reflect.ValueOf(i70.New),
		"NewLogger": reflect.ValueOf(i70.NewLogger),
	}
	stdfuncs["math"] = map[string]reflect.Value{
		"Abs": reflect.ValueOf(i71.Abs),
		"Acos": reflect.ValueOf(i71.Acos),
		"Acosh": reflect.ValueOf(i71.Acosh),
		"Asin": reflect.ValueOf(i71.Asin),
		"Asinh": reflect.ValueOf(i71.Asinh),
		"Atan": reflect.ValueOf(i71.Atan),
		"Atan2": reflect.ValueOf(i71.Atan2),
		"Atanh": reflect.ValueOf(i71.Atanh),
		"Cbrt": reflect.ValueOf(i71.Cbrt),
		"Ceil": reflect.ValueOf(i71.Ceil),
		"Copysign": reflect.ValueOf(i71.Copysign),
		"Cos": reflect.ValueOf(i71.Cos),
		"Cosh": reflect.ValueOf(i71.Cosh),
		"Dim": reflect.ValueOf(i71.Dim),
		"E": reflect.ValueOf(i71.E),
		"Erf": reflect.ValueOf(i71.Erf),
		"Erfc": reflect.ValueOf(i71.Erfc),
		"Erfcinv": reflect.ValueOf(i71.Erfcinv),
		"Erfinv": reflect.ValueOf(i71.Erfinv),
		"Exp": reflect.ValueOf(i71.Exp),
		"Exp2": reflect.ValueOf(i71.Exp2),
		"Expm1": reflect.ValueOf(i71.Expm1),
		"FMA": reflect.ValueOf(i71.FMA),
		"Float32bits": reflect.ValueOf(i71.Float32bits),
		"Float32frombits": reflect.ValueOf(i71.Float32frombits),
		"Float64bits": reflect.ValueOf(i71.Float64bits),
		"Float64frombits": reflect.ValueOf(i71.Float64frombits),
		"Floor": reflect.ValueOf(i71.Floor),
		"Frexp": reflect.ValueOf(i71.Frexp),
		"Gamma": reflect.ValueOf(i71.Gamma),
		"Hypot": reflect.ValueOf(i71.Hypot),
		"Ilogb": reflect.ValueOf(i71.Ilogb),
		"Inf": reflect.ValueOf(i71.Inf),
		"IsInf": reflect.ValueOf(i71.IsInf),
		"IsNaN": reflect.ValueOf(i71.IsNaN),
		"J0": reflect.ValueOf(i71.J0),
		"J1": reflect.ValueOf(i71.J1),
		"Jn": reflect.ValueOf(i71.Jn),
		"Ldexp": reflect.ValueOf(i71.Ldexp),
		"Lgamma": reflect.ValueOf(i71.Lgamma),
		"Ln10": reflect.ValueOf(i71.Ln10),
		"Ln2": reflect.ValueOf(i71.Ln2),
		"Log": reflect.ValueOf(i71.Log),
		"Log10": reflect.ValueOf(i71.Log10),
		"Log10E": reflect.ValueOf(i71.Log10E),
		"Log1p": reflect.ValueOf(i71.Log1p),
		"Log2": reflect.ValueOf(i71.Log2),
		"Log2E": reflect.ValueOf(i71.Log2E),
		"Logb": reflect.ValueOf(i71.Logb),
		"Max": reflect.ValueOf(i71.Max),
		"MaxFloat32": reflect.ValueOf(i71.MaxFloat32),
		"MaxFloat64": reflect.ValueOf(i71.MaxFloat64),
		"MaxInt": reflect.ValueOf(i71.MaxInt),
		"MaxInt16": reflect.ValueOf(i71.MaxInt16),
		"MaxInt32": reflect.ValueOf(i71.MaxInt32),
		"MaxInt64": reflect.ValueOf(i71.MaxInt64),
		"MaxInt8": reflect.ValueOf(i71.MaxInt8),
		"MaxUint16": reflect.ValueOf(i71.MaxUint16),
		"MaxUint32": reflect.ValueOf(i71.MaxUint32),
		"MaxUint8": reflect.ValueOf(i71.MaxUint8),
		"Min": reflect.ValueOf(i71.Min),
		"MinInt": reflect.ValueOf(i71.MinInt),
		"MinInt16": reflect.ValueOf(i71.MinInt16),
		"MinInt32": reflect.ValueOf(i71.MinInt32),
		"MinInt64": reflect.ValueOf(i71.MinInt64),
		"MinInt8": reflect.ValueOf(i71.MinInt8),
		"Mod": reflect.ValueOf(i71.Mod),
		"Modf": reflect.ValueOf(i71.Modf),
		"NaN": reflect.ValueOf(i71.NaN),
		"Nextafter": reflect.ValueOf(i71.Nextafter),
		"Nextafter32": reflect.ValueOf(i71.Nextafter32),
		"Phi": reflect.ValueOf(i71.Phi),
		"Pi": reflect.ValueOf(i71.Pi),
		"Pow": reflect.ValueOf(i71.Pow),
		"Pow10": reflect.ValueOf(i71.Pow10),
		"Remainder": reflect.ValueOf(i71.Remainder),
		"Round": reflect.ValueOf(i71.Round),
		"RoundToEven": reflect.ValueOf(i71.RoundToEven),
		"Signbit": reflect.ValueOf(i71.Signbit),
		"Sin": reflect.ValueOf(i71.Sin),
		"Sincos": reflect.ValueOf(i71.Sincos),
		"Sinh": reflect.ValueOf(i71.Sinh),
		"SmallestNonzeroFloat32": reflect.ValueOf(i71.SmallestNonzeroFloat32),
		"SmallestNonzeroFloat64": reflect.ValueOf(i71.SmallestNonzeroFloat64),
		"Sqrt": reflect.ValueOf(i71.Sqrt),
		"Sqrt2": reflect.ValueOf(i71.Sqrt2),
		"SqrtE": reflect.ValueOf(i71.SqrtE),
		"SqrtPhi": reflect.ValueOf(i71.SqrtPhi),
		"SqrtPi": reflect.ValueOf(i71.SqrtPi),
		"Tan": reflect.ValueOf(i71.Tan),
		"Tanh": reflect.ValueOf(i71.Tanh),
		"Trunc": reflect.ValueOf(i71.Trunc),
		"Y0": reflect.ValueOf(i71.Y0),
		"Y1": reflect.ValueOf(i71.Y1),
		"Yn": reflect.ValueOf(i71.Yn),
	}
	stdfuncs["math/big"] = map[string]reflect.Value{
		"Above": reflect.ValueOf(i72.Above),
		"AwayFromZero": reflect.ValueOf(i72.AwayFromZero),
		"Below": reflect.ValueOf(i72.Below),
		"Exact": reflect.ValueOf(i72.Exact),
		"Jacobi": reflect.ValueOf(i72.Jacobi),
		"MaxBase": reflect.ValueOf(i72.MaxBase),
		"MaxExp": reflect.ValueOf(i72.MaxExp),
		"MaxPrec": reflect.ValueOf(i72.MaxPrec),
		"MinExp": reflect.ValueOf(i72.MinExp),
		"NewFloat": reflect.ValueOf(i72.NewFloat),
		"NewInt": reflect.ValueOf(i72.NewInt),
		"NewRat": reflect.ValueOf(i72.NewRat),
		"ParseFloat": reflect.ValueOf(i72.ParseFloat),
		"ToNearestAway": reflect.ValueOf(i72.ToNearestAway),
		"ToNearestEven": reflect.ValueOf(i72.ToNearestEven),
		"ToNegativeInf": reflect.ValueOf(i72.ToNegativeInf),
		"ToPositiveInf": reflect.ValueOf(i72.ToPositiveInf),
		"ToZero": reflect.ValueOf(i72.ToZero),
	}
	stdfuncs["math/bits"] = map[string]reflect.Value{
		"Add": reflect.ValueOf(i73.Add),
		"Add32": reflect.ValueOf(i73.Add32),
		"Add64": reflect.ValueOf(i73.Add64),
		"Div": reflect.ValueOf(i73.Div),
		"Div32": reflect.ValueOf(i73.Div32),
		"Div64": reflect.ValueOf(i73.Div64),
		"LeadingZeros": reflect.ValueOf(i73.LeadingZeros),
		"LeadingZeros16": reflect.ValueOf(i73.LeadingZeros16),
		"LeadingZeros32": reflect.ValueOf(i73.LeadingZeros32),
		"LeadingZeros64": reflect.ValueOf(i73.LeadingZeros64),
		"LeadingZeros8": reflect.ValueOf(i73.LeadingZeros8),
		"Len": reflect.ValueOf(i73.Len),
		"Len16": reflect.ValueOf(i73.Len16),
		"Len32": reflect.ValueOf(i73.Len32),
		"Len64": reflect.ValueOf(i73.Len64),
		"Len8": reflect.ValueOf(i73.Len8),
		"Mul": reflect.ValueOf(i73.Mul),
		"Mul32": reflect.ValueOf(i73.Mul32),
		"Mul64": reflect.ValueOf(i73.Mul64),
		"OnesCount": reflect.ValueOf(i73.OnesCount),
		"OnesCount16": reflect.ValueOf(i73.OnesCount16),
		"OnesCount32": reflect.ValueOf(i73.OnesCount32),
		"OnesCount64": reflect.ValueOf(i73.OnesCount64),
		"OnesCount8": reflect.ValueOf(i73.OnesCount8),
		"Rem": reflect.ValueOf(i73.Rem),
		"Rem32": reflect.ValueOf(i73.Rem32),
		"Rem64": reflect.ValueOf(i73.Rem64),
		"Reverse": reflect.ValueOf(i73.Reverse),
		"Reverse16": reflect.ValueOf(i73.Reverse16),
		"Reverse32": reflect.ValueOf(i73.Reverse32),
		"Reverse64": reflect.ValueOf(i73.Reverse64),
		"Reverse8": reflect.ValueOf(i73.Reverse8),
		"ReverseBytes": reflect.ValueOf(i73.ReverseBytes),
		"ReverseBytes16": reflect.ValueOf(i73.ReverseBytes16),
		"ReverseBytes32": reflect.ValueOf(i73.ReverseBytes32),
		"ReverseBytes64": reflect.ValueOf(i73.ReverseBytes64),
		"RotateLeft": reflect.ValueOf(i73.RotateLeft),
		"RotateLeft16": reflect.ValueOf(i73.RotateLeft16),
		"RotateLeft32": reflect.ValueOf(i73.RotateLeft32),
		"RotateLeft64": reflect.ValueOf(i73.RotateLeft64),
		"RotateLeft8": reflect.ValueOf(i73.RotateLeft8),
		"Sub": reflect.ValueOf(i73.Sub),
		"Sub32": reflect.ValueOf(i73.Sub32),
		"Sub64": reflect.ValueOf(i73.Sub64),
		"TrailingZeros": reflect.ValueOf(i73.TrailingZeros),
		"TrailingZeros16": reflect.ValueOf(i73.TrailingZeros16),
		"TrailingZeros32": reflect.ValueOf(i73.TrailingZeros32),
		"TrailingZeros64": reflect.ValueOf(i73.TrailingZeros64),
		"TrailingZeros8": reflect.ValueOf(i73.TrailingZeros8),
		"UintSize": reflect.ValueOf(i73.UintSize),
	}
	stdfuncs["math/cmplx"] = map[string]reflect.Value{
		"Abs": reflect.ValueOf(i74.Abs),
		"Acos": reflect.ValueOf(i74.Acos),
		"Acosh": reflect.ValueOf(i74.Acosh),
		"Asin": reflect.ValueOf(i74.Asin),
		"Asinh": reflect.ValueOf(i74.Asinh),
		"Atan": reflect.ValueOf(i74.Atan),
		"Atanh": reflect.ValueOf(i74.Atanh),
		"Conj": reflect.ValueOf(i74.Conj),
		"Cos": reflect.ValueOf(i74.Cos),
		"Cosh": reflect.ValueOf(i74.Cosh),
		"Cot": reflect.ValueOf(i74.Cot),
		"Exp": reflect.ValueOf(i74.Exp),
		"Inf": reflect.ValueOf(i74.Inf),
		"IsInf": reflect.ValueOf(i74.IsInf),
		"IsNaN": reflect.ValueOf(i74.IsNaN),
		"Log": reflect.ValueOf(i74.Log),
		"Log10": reflect.ValueOf(i74.Log10),
		"NaN": reflect.ValueOf(i74.NaN),
		"Phase": reflect.ValueOf(i74.Phase),
		"Polar": reflect.ValueOf(i74.Polar),
		"Pow": reflect.ValueOf(i74.Pow),
		"Rect": reflect.ValueOf(i74.Rect),
		"Sin": reflect.ValueOf(i74.Sin),
		"Sinh": reflect.ValueOf(i74.Sinh),
		"Sqrt": reflect.ValueOf(i74.Sqrt),
		"Tan": reflect.ValueOf(i74.Tan),
		"Tanh": reflect.ValueOf(i74.Tanh),
	}
	stdfuncs["math/rand"] = map[string]reflect.Value{
		"ExpFloat64": reflect.ValueOf(i75.ExpFloat64),
		"Float32": reflect.ValueOf(i75.Float32),
		"Float64": reflect.ValueOf(i75.Float64),
		"Int": reflect.ValueOf(i75.Int),
		"Int31": reflect.ValueOf(i75.Int31),
		"Int31n": reflect.ValueOf(i75.Int31n),
		"Int63": reflect.ValueOf(i75.Int63),
		"Int63n": reflect.ValueOf(i75.Int63n),
		"Intn": reflect.ValueOf(i75.Intn),
		"New": reflect.ValueOf(i75.New),
		"NewSource": reflect.ValueOf(i75.NewSource),
		"NewZipf": reflect.ValueOf(i75.NewZipf),
		"NormFloat64": reflect.ValueOf(i75.NormFloat64),
		"Perm": reflect.ValueOf(i75.Perm),
		"Read": reflect.ValueOf(i75.Read),
		"Seed": reflect.ValueOf(i75.Seed),
		"Shuffle": reflect.ValueOf(i75.Shuffle),
		"Uint32": reflect.ValueOf(i75.Uint32),
		"Uint64": reflect.ValueOf(i75.Uint64),
	}
	stdfuncs["mime"] = map[string]reflect.Value{
		"AddExtensionType": reflect.ValueOf(i76.AddExtensionType),
		"BEncoding": reflect.ValueOf(i76.BEncoding),
		"ErrInvalidMediaParameter": reflect.ValueOf(i76.ErrInvalidMediaParameter),
		"ExtensionsByType": reflect.ValueOf(i76.ExtensionsByType),
		"FormatMediaType": reflect.ValueOf(i76.FormatMediaType),
		"ParseMediaType": reflect.ValueOf(i76.ParseMediaType),
		"QEncoding": reflect.ValueOf(i76.QEncoding),
		"TypeByExtension": reflect.ValueOf(i76.TypeByExtension),
	}
	stdfuncs["mime/multipart"] = map[string]reflect.Value{
		"ErrMessageTooLarge": reflect.ValueOf(i77.ErrMessageTooLarge),
		"FileContentDisposition": reflect.ValueOf(i77.FileContentDisposition),
		"NewReader": reflect.ValueOf(i77.NewReader),
		"NewWriter": reflect.ValueOf(i77.NewWriter),
	}
	stdfuncs["mime/quotedprintable"] = map[string]reflect.Value{
		"NewReader": reflect.ValueOf(i78.NewReader),
		"NewWriter": reflect.ValueOf(i78.NewWriter),
	}
	stdfuncs["net"] = map[string]reflect.Value{
		"CIDRMask": reflect.ValueOf(i79.CIDRMask),
		"DefaultResolver": reflect.ValueOf(i79.DefaultResolver),
		"Dial": reflect.ValueOf(i79.Dial),
		"DialIP": reflect.ValueOf(i79.DialIP),
		"DialTCP": reflect.ValueOf(i79.DialTCP),
		"DialTimeout": reflect.ValueOf(i79.DialTimeout),
		"DialUDP": reflect.ValueOf(i79.DialUDP),
		"DialUnix": reflect.ValueOf(i79.DialUnix),
		"ErrClosed": reflect.ValueOf(i79.ErrClosed),
		"ErrWriteToConnected": reflect.ValueOf(i79.ErrWriteToConnected),
		"FileConn": reflect.ValueOf(i79.FileConn),
		"FileListener": reflect.ValueOf(i79.FileListener),
		"FilePacketConn": reflect.ValueOf(i79.FilePacketConn),
		"FlagBroadcast": reflect.ValueOf(i79.FlagBroadcast),
		"FlagLoopback": reflect.ValueOf(i79.FlagLoopback),
		"FlagMulticast": reflect.ValueOf(i79.FlagMulticast),
		"FlagPointToPoint": reflect.ValueOf(i79.FlagPointToPoint),
		"FlagRunning": reflect.ValueOf(i79.FlagRunning),
		"FlagUp": reflect.ValueOf(i79.FlagUp),
		"IPv4": reflect.ValueOf(i79.IPv4),
		"IPv4Mask": reflect.ValueOf(i79.IPv4Mask),
		"IPv4allrouter": reflect.ValueOf(i79.IPv4allrouter),
		"IPv4allsys": reflect.ValueOf(i79.IPv4allsys),
		"IPv4bcast": reflect.ValueOf(i79.IPv4bcast),
		"IPv4len": reflect.ValueOf(i79.IPv4len),
		"IPv4zero": reflect.ValueOf(i79.IPv4zero),
		"IPv6interfacelocalallnodes": reflect.ValueOf(i79.IPv6interfacelocalallnodes),
		"IPv6len": reflect.ValueOf(i79.IPv6len),
		"IPv6linklocalallnodes": reflect.ValueOf(i79.IPv6linklocalallnodes),
		"IPv6linklocalallrouters": reflect.ValueOf(i79.IPv6linklocalallrouters),
		"IPv6loopback": reflect.ValueOf(i79.IPv6loopback),
		"IPv6unspecified": reflect.ValueOf(i79.IPv6unspecified),
		"IPv6zero": reflect.ValueOf(i79.IPv6zero),
		"InterfaceAddrs": reflect.ValueOf(i79.InterfaceAddrs),
		"InterfaceByIndex": reflect.ValueOf(i79.InterfaceByIndex),
		"InterfaceByName": reflect.ValueOf(i79.InterfaceByName),
		"Interfaces": reflect.ValueOf(i79.Interfaces),
		"JoinHostPort": reflect.ValueOf(i79.JoinHostPort),
		"Listen": reflect.ValueOf(i79.Listen),
		"ListenIP": reflect.ValueOf(i79.ListenIP),
		"ListenMulticastUDP": reflect.ValueOf(i79.ListenMulticastUDP),
		"ListenPacket": reflect.ValueOf(i79.ListenPacket),
		"ListenTCP": reflect.ValueOf(i79.ListenTCP),
		"ListenUDP": reflect.ValueOf(i79.ListenUDP),
		"ListenUnix": reflect.ValueOf(i79.ListenUnix),
		"ListenUnixgram": reflect.ValueOf(i79.ListenUnixgram),
		"LookupAddr": reflect.ValueOf(i79.LookupAddr),
		"LookupCNAME": reflect.ValueOf(i79.LookupCNAME),
		"LookupHost": reflect.ValueOf(i79.LookupHost),
		"LookupIP": reflect.ValueOf(i79.LookupIP),
		"LookupMX": reflect.ValueOf(i79.LookupMX),
		"LookupNS": reflect.ValueOf(i79.LookupNS),
		"LookupPort": reflect.ValueOf(i79.LookupPort),
		"LookupSRV": reflect.ValueOf(i79.LookupSRV),
		"LookupTXT": reflect.ValueOf(i79.LookupTXT),
		"ParseCIDR": reflect.ValueOf(i79.ParseCIDR),
		"ParseIP": reflect.ValueOf(i79.ParseIP),
		"ParseMAC": reflect.ValueOf(i79.ParseMAC),
		"Pipe": reflect.ValueOf(i79.Pipe),
		"ResolveIPAddr": reflect.ValueOf(i79.ResolveIPAddr),
		"ResolveTCPAddr": reflect.ValueOf(i79.ResolveTCPAddr),
		"ResolveUDPAddr": reflect.ValueOf(i79.ResolveUDPAddr),
		"ResolveUnixAddr": reflect.ValueOf(i79.ResolveUnixAddr),
		"SplitHostPort": reflect.ValueOf(i79.SplitHostPort),
		"TCPAddrFromAddrPort": reflect.ValueOf(i79.TCPAddrFromAddrPort),
		"UDPAddrFromAddrPort": reflect.ValueOf(i79.UDPAddrFromAddrPort),
	}
	stdfuncs["net/http"] = map[string]reflect.Value{
		"AllowQuerySemicolons": reflect.ValueOf(i80.AllowQuerySemicolons),
		"CanonicalHeaderKey": reflect.ValueOf(i80.CanonicalHeaderKey),
		"DefaultClient": reflect.ValueOf(i80.DefaultClient),
		"DefaultMaxHeaderBytes": reflect.ValueOf(i80.DefaultMaxHeaderBytes),
		"DefaultMaxIdleConnsPerHost": reflect.ValueOf(i80.DefaultMaxIdleConnsPerHost),
		"DefaultServeMux": reflect.ValueOf(i80.DefaultServeMux),
		"DefaultTransport": reflect.ValueOf(i80.DefaultTransport),
		"DetectContentType": reflect.ValueOf(i80.DetectContentType),
		"ErrAbortHandler": reflect.ValueOf(i80.ErrAbortHandler),
		"ErrBodyNotAllowed": reflect.ValueOf(i80.ErrBodyNotAllowed),
		"ErrBodyReadAfterClose": reflect.ValueOf(i80.ErrBodyReadAfterClose),
		"ErrContentLength": reflect.ValueOf(i80.ErrContentLength),
		"ErrHandlerTimeout": reflect.ValueOf(i80.ErrHandlerTimeout),
		"ErrHeaderTooLong": reflect.ValueOf(i80.ErrHeaderTooLong),
		"ErrHijacked": reflect.ValueOf(i80.ErrHijacked),
		"ErrLineTooLong": reflect.ValueOf(i80.ErrLineTooLong),
		"ErrMissingBoundary": reflect.ValueOf(i80.ErrMissingBoundary),
		"ErrMissingContentLength": reflect.ValueOf(i80.ErrMissingContentLength),
		"ErrMissingFile": reflect.ValueOf(i80.ErrMissingFile),
		"ErrNoCookie": reflect.ValueOf(i80.ErrNoCookie),
		"ErrNoLocation": reflect.ValueOf(i80.ErrNoLocation),
		"ErrNotMultipart": reflect.ValueOf(i80.ErrNotMultipart),
		"ErrNotSupported": reflect.ValueOf(i80.ErrNotSupported),
		"ErrSchemeMismatch": reflect.ValueOf(i80.ErrSchemeMismatch),
		"ErrServerClosed": reflect.ValueOf(i80.ErrServerClosed),
		"ErrShortBody": reflect.ValueOf(i80.ErrShortBody),
		"ErrSkipAltProtocol": reflect.ValueOf(i80.ErrSkipAltProtocol),
		"ErrUnexpectedTrailer": reflect.ValueOf(i80.ErrUnexpectedTrailer),
		"ErrUseLastResponse": reflect.ValueOf(i80.ErrUseLastResponse),
		"ErrWriteAfterFlush": reflect.ValueOf(i80.ErrWriteAfterFlush),
		"Error": reflect.ValueOf(i80.Error),
		"FS": reflect.ValueOf(i80.FS),
		"FileServer": reflect.ValueOf(i80.FileServer),
		"FileServerFS": reflect.ValueOf(i80.FileServerFS),
		"Get": reflect.ValueOf(i80.Get),
		"Handle": reflect.ValueOf(i80.Handle),
		"HandleFunc": reflect.ValueOf(i80.HandleFunc),
		"Head": reflect.ValueOf(i80.Head),
		"ListenAndServe": reflect.ValueOf(i80.ListenAndServe),
		"ListenAndServeTLS": reflect.ValueOf(i80.ListenAndServeTLS),
		"LocalAddrContextKey": reflect.ValueOf(i80.LocalAddrContextKey),
		"MaxBytesHandler": reflect.ValueOf(i80.MaxBytesHandler),
		"MaxBytesReader": reflect.ValueOf(i80.MaxBytesReader),
		"MethodConnect": reflect.ValueOf(i80.MethodConnect),
		"MethodDelete": reflect.ValueOf(i80.MethodDelete),
		"MethodGet": reflect.ValueOf(i80.MethodGet),
		"MethodHead": reflect.ValueOf(i80.MethodHead),
		"MethodOptions": reflect.ValueOf(i80.MethodOptions),
		"MethodPatch": reflect.ValueOf(i80.MethodPatch),
		"MethodPost": reflect.ValueOf(i80.MethodPost),
		"MethodPut": reflect.ValueOf(i80.MethodPut),
		"MethodTrace": reflect.ValueOf(i80.MethodTrace),
		"NewCrossOriginProtection": reflect.ValueOf(i80.NewCrossOriginProtection),
		"NewFileTransport": reflect.ValueOf(i80.NewFileTransport),
		"NewFileTransportFS": reflect.ValueOf(i80.NewFileTransportFS),
		"NewRequest": reflect.ValueOf(i80.NewRequest),
		"NewRequestWithContext": reflect.ValueOf(i80.NewRequestWithContext),
		"NewResponseController": reflect.ValueOf(i80.NewResponseController),
		"NewServeMux": reflect.ValueOf(i80.NewServeMux),
		"NoBody": reflect.ValueOf(i80.NoBody),
		"NotFound": reflect.ValueOf(i80.NotFound),
		"NotFoundHandler": reflect.ValueOf(i80.NotFoundHandler),
		"ParseCookie": reflect.ValueOf(i80.ParseCookie),
		"ParseHTTPVersion": reflect.ValueOf(i80.ParseHTTPVersion),
		"ParseSetCookie": reflect.ValueOf(i80.ParseSetCookie),
		"ParseTime": reflect.ValueOf(i80.ParseTime),
		"Post": reflect.ValueOf(i80.Post),
		"PostForm": reflect.ValueOf(i80.PostForm),
		"ProxyFromEnvironment": reflect.ValueOf(i80.ProxyFromEnvironment),
		"ProxyURL": reflect.ValueOf(i80.ProxyURL),
		"ReadRequest": reflect.ValueOf(i80.ReadRequest),
		"ReadResponse": reflect.ValueOf(i80.ReadResponse),
		"Redirect": reflect.ValueOf(i80.Redirect),
		"RedirectHandler": reflect.ValueOf(i80.RedirectHandler),
		"SameSiteDefaultMode": reflect.ValueOf(i80.SameSiteDefaultMode),
		"SameSiteLaxMode": reflect.ValueOf(i80.SameSiteLaxMode),
		"SameSiteNoneMode": reflect.ValueOf(i80.SameSiteNoneMode),
		"SameSiteStrictMode": reflect.ValueOf(i80.SameSiteStrictMode),
		"Serve": reflect.ValueOf(i80.Serve),
		"ServeContent": reflect.ValueOf(i80.ServeContent),
		"ServeFile": reflect.ValueOf(i80.ServeFile),
		"ServeFileFS": reflect.ValueOf(i80.ServeFileFS),
		"ServeTLS": reflect.ValueOf(i80.ServeTLS),
		"ServerContextKey": reflect.ValueOf(i80.ServerContextKey),
		"SetCookie": reflect.ValueOf(i80.SetCookie),
		"StateActive": reflect.ValueOf(i80.StateActive),
		"StateClosed": reflect.ValueOf(i80.StateClosed),
		"StateHijacked": reflect.ValueOf(i80.StateHijacked),
		"StateIdle": reflect.ValueOf(i80.StateIdle),
		"StateNew": reflect.ValueOf(i80.StateNew),
		"StatusAccepted": reflect.ValueOf(i80.StatusAccepted),
		"StatusAlreadyReported": reflect.ValueOf(i80.StatusAlreadyReported),
		"StatusBadGateway": reflect.ValueOf(i80.StatusBadGateway),
		"StatusBadRequest": reflect.ValueOf(i80.StatusBadRequest),
		"StatusConflict": reflect.ValueOf(i80.StatusConflict),
		"StatusContinue": reflect.ValueOf(i80.StatusContinue),
		"StatusCreated": reflect.ValueOf(i80.StatusCreated),
		"StatusEarlyHints": reflect.ValueOf(i80.StatusEarlyHints),
		"StatusExpectationFailed": reflect.ValueOf(i80.StatusExpectationFailed),
		"StatusFailedDependency": reflect.ValueOf(i80.StatusFailedDependency),
		"StatusForbidden": reflect.ValueOf(i80.StatusForbidden),
		"StatusFound": reflect.ValueOf(i80.StatusFound),
		"StatusGatewayTimeout": reflect.ValueOf(i80.StatusGatewayTimeout),
		"StatusGone": reflect.ValueOf(i80.StatusGone),
		"StatusHTTPVersionNotSupported": reflect.ValueOf(i80.StatusHTTPVersionNotSupported),
		"StatusIMUsed": reflect.ValueOf(i80.StatusIMUsed),
		"StatusInsufficientStorage": reflect.ValueOf(i80.StatusInsufficientStorage),
		"StatusInternalServerError": reflect.ValueOf(i80.StatusInternalServerError),
		"StatusLengthRequired": reflect.ValueOf(i80.StatusLengthRequired),
		"StatusLocked": reflect.ValueOf(i80.StatusLocked),
		"StatusLoopDetected": reflect.ValueOf(i80.StatusLoopDetected),
		"StatusMethodNotAllowed": reflect.ValueOf(i80.StatusMethodNotAllowed),
		"StatusMisdirectedRequest": reflect.ValueOf(i80.StatusMisdirectedRequest),
		"StatusMovedPermanently": reflect.ValueOf(i80.StatusMovedPermanently),
		"StatusMultiStatus": reflect.ValueOf(i80.StatusMultiStatus),
		"StatusMultipleChoices": reflect.ValueOf(i80.StatusMultipleChoices),
		"StatusNetworkAuthenticationRequired": reflect.ValueOf(i80.StatusNetworkAuthenticationRequired),
		"StatusNoContent": reflect.ValueOf(i80.StatusNoContent),
		"StatusNonAuthoritativeInfo": reflect.ValueOf(i80.StatusNonAuthoritativeInfo),
		"StatusNotAcceptable": reflect.ValueOf(i80.StatusNotAcceptable),
		"StatusNotExtended": reflect.ValueOf(i80.StatusNotExtended),
		"StatusNotFound": reflect.ValueOf(i80.StatusNotFound),
		"StatusNotImplemented": reflect.ValueOf(i80.StatusNotImplemented),
		"StatusNotModified": reflect.ValueOf(i80.StatusNotModified),
		"StatusOK": reflect.ValueOf(i80.StatusOK),
		"StatusPartialContent": reflect.ValueOf(i80.StatusPartialContent),
		"StatusPaymentRequired": reflect.ValueOf(i80.StatusPaymentRequired),
		"StatusPermanentRedirect": reflect.ValueOf(i80.StatusPermanentRedirect),
		"StatusPreconditionFailed": reflect.ValueOf(i80.StatusPreconditionFailed),
		"StatusPreconditionRequired": reflect.ValueOf(i80.StatusPreconditionRequired),
		"StatusProcessing": reflect.ValueOf(i80.StatusProcessing),
		"StatusProxyAuthRequired": reflect.ValueOf(i80.StatusProxyAuthRequired),
		"StatusRequestEntityTooLarge": reflect.ValueOf(i80.StatusRequestEntityTooLarge),
		"StatusRequestHeaderFieldsTooLarge": reflect.ValueOf(i80.StatusRequestHeaderFieldsTooLarge),
		"StatusRequestTimeout": reflect.ValueOf(i80.StatusRequestTimeout),
		"StatusRequestURITooLong": reflect.ValueOf(i80.StatusRequestURITooLong),
		"StatusRequestedRangeNotSatisfiable": reflect.ValueOf(i80.StatusRequestedRangeNotSatisfiable),
		"StatusResetContent": reflect.ValueOf(i80.StatusResetContent),
		"StatusSeeOther": reflect.ValueOf(i80.StatusSeeOther),
		"StatusServiceUnavailable": reflect.ValueOf(i80.StatusServiceUnavailable),
		"StatusSwitchingProtocols": reflect.ValueOf(i80.StatusSwitchingProtocols),
		"StatusTeapot": reflect.ValueOf(i80.StatusTeapot),
		"StatusTemporaryRedirect": reflect.ValueOf(i80.StatusTemporaryRedirect),
		"StatusText": reflect.ValueOf(i80.StatusText),
		"StatusTooEarly": reflect.ValueOf(i80.StatusTooEarly),
		"StatusTooManyRequests": reflect.ValueOf(i80.StatusTooManyRequests),
		"StatusUnauthorized": reflect.ValueOf(i80.StatusUnauthorized),
		"StatusUnavailableForLegalReasons": reflect.ValueOf(i80.StatusUnavailableForLegalReasons),
		"StatusUnprocessableEntity": reflect.ValueOf(i80.StatusUnprocessableEntity),
		"StatusUnsupportedMediaType": reflect.ValueOf(i80.StatusUnsupportedMediaType),
		"StatusUpgradeRequired": reflect.ValueOf(i80.StatusUpgradeRequired),
		"StatusUseProxy": reflect.ValueOf(i80.StatusUseProxy),
		"StatusVariantAlsoNegotiates": reflect.ValueOf(i80.StatusVariantAlsoNegotiates),
		"StripPrefix": reflect.ValueOf(i80.StripPrefix),
		"TimeFormat": reflect.ValueOf(i80.TimeFormat),
		"TimeoutHandler": reflect.ValueOf(i80.TimeoutHandler),
		"TrailerPrefix": reflect.ValueOf(i80.TrailerPrefix),
	}
	stdfuncs["net/http/cgi"] = map[string]reflect.Value{
		"Request": reflect.ValueOf(i81.Request),
		"RequestFromMap": reflect.ValueOf(i81.RequestFromMap),
		"Serve": reflect.ValueOf(i81.Serve),
	}
	stdfuncs["net/http/cookiejar"] = map[string]reflect.Value{
		"New": reflect.ValueOf(i82.New),
	}
	stdfuncs["net/http/fcgi"] = map[string]reflect.Value{
		"ErrConnClosed": reflect.ValueOf(i83.ErrConnClosed),
		"ErrRequestAborted": reflect.ValueOf(i83.ErrRequestAborted),
		"ProcessEnv": reflect.ValueOf(i83.ProcessEnv),
		"Serve": reflect.ValueOf(i83.Serve),
	}
	stdfuncs["net/http/httptest"] = map[string]reflect.Value{
		"DefaultRemoteAddr": reflect.ValueOf(i84.DefaultRemoteAddr),
		"NewRecorder": reflect.ValueOf(i84.NewRecorder),
		"NewRequest": reflect.ValueOf(i84.NewRequest),
		"NewRequestWithContext": reflect.ValueOf(i84.NewRequestWithContext),
		"NewServer": reflect.ValueOf(i84.NewServer),
		"NewTLSServer": reflect.ValueOf(i84.NewTLSServer),
		"NewUnstartedServer": reflect.ValueOf(i84.NewUnstartedServer),
	}
	stdfuncs["net/http/httptrace"] = map[string]reflect.Value{
		"ContextClientTrace": reflect.ValueOf(i85.ContextClientTrace),
		"WithClientTrace": reflect.ValueOf(i85.WithClientTrace),
	}
	stdfuncs["net/http/httputil"] = map[string]reflect.Value{
		"DumpRequest": reflect.ValueOf(i86.DumpRequest),
		"DumpRequestOut": reflect.ValueOf(i86.DumpRequestOut),
		"DumpResponse": reflect.ValueOf(i86.DumpResponse),
		"ErrClosed": reflect.ValueOf(i86.ErrClosed),
		"ErrLineTooLong": reflect.ValueOf(i86.ErrLineTooLong),
		"ErrPersistEOF": reflect.ValueOf(i86.ErrPersistEOF),
		"ErrPipeline": reflect.ValueOf(i86.ErrPipeline),
		"NewChunkedReader": reflect.ValueOf(i86.NewChunkedReader),
		"NewChunkedWriter": reflect.ValueOf(i86.NewChunkedWriter),
		"NewClientConn": reflect.ValueOf(i86.NewClientConn),
		"NewProxyClientConn": reflect.ValueOf(i86.NewProxyClientConn),
		"NewServerConn": reflect.ValueOf(i86.NewServerConn),
		"NewSingleHostReverseProxy": reflect.ValueOf(i86.NewSingleHostReverseProxy),
	}
	stdfuncs["net/http/pprof"] = map[string]reflect.Value{
		"Cmdline": reflect.ValueOf(i87.Cmdline),
		"Handler": reflect.ValueOf(i87.Handler),
		"Index": reflect.ValueOf(i87.Index),
		"Profile": reflect.ValueOf(i87.Profile),
		"Symbol": reflect.ValueOf(i87.Symbol),
		"Trace": reflect.ValueOf(i87.Trace),
	}
	stdfuncs["net/mail"] = map[string]reflect.Value{
		"ErrHeaderNotPresent": reflect.ValueOf(i88.ErrHeaderNotPresent),
		"ParseAddress": reflect.ValueOf(i88.ParseAddress),
		"ParseAddressList": reflect.ValueOf(i88.ParseAddressList),
		"ParseDate": reflect.ValueOf(i88.ParseDate),
		"ReadMessage": reflect.ValueOf(i88.ReadMessage),
	}
	stdfuncs["net/rpc"] = map[string]reflect.Value{
		"Accept": reflect.ValueOf(i89.Accept),
		"DefaultDebugPath": reflect.ValueOf(i89.DefaultDebugPath),
		"DefaultRPCPath": reflect.ValueOf(i89.DefaultRPCPath),
		"DefaultServer": reflect.ValueOf(i89.DefaultServer),
		"Dial": reflect.ValueOf(i89.Dial),
		"DialHTTP": reflect.ValueOf(i89.DialHTTP),
		"DialHTTPPath": reflect.ValueOf(i89.DialHTTPPath),
		"ErrShutdown": reflect.ValueOf(i89.ErrShutdown),
		"HandleHTTP": reflect.ValueOf(i89.HandleHTTP),
		"NewClient": reflect.ValueOf(i89.NewClient),
		"NewClientWithCodec": reflect.ValueOf(i89.NewClientWithCodec),
		"NewServer": reflect.ValueOf(i89.NewServer),
		"Register": reflect.ValueOf(i89.Register),
		"RegisterName": reflect.ValueOf(i89.RegisterName),
		"ServeCodec": reflect.ValueOf(i89.ServeCodec),
		"ServeConn": reflect.ValueOf(i89.ServeConn),
		"ServeRequest": reflect.ValueOf(i89.ServeRequest),
	}
	stdfuncs["net/rpc/jsonrpc"] = map[string]reflect.Value{
		"Dial": reflect.ValueOf(i90.Dial),
		"NewClient": reflect.ValueOf(i90.NewClient),
		"NewClientCodec": reflect.ValueOf(i90.NewClientCodec),
		"NewServerCodec": reflect.ValueOf(i90.NewServerCodec),
		"ServeConn": reflect.ValueOf(i90.ServeConn),
	}
	stdfuncs["net/smtp"] = map[string]reflect.Value{
		"CRAMMD5Auth": reflect.ValueOf(i91.CRAMMD5Auth),
		"Dial": reflect.ValueOf(i91.Dial),
		"NewClient": reflect.ValueOf(i91.NewClient),
		"PlainAuth": reflect.ValueOf(i91.PlainAuth),
		"SendMail": reflect.ValueOf(i91.SendMail),
	}
	stdfuncs["net/textproto"] = map[string]reflect.Value{
		"CanonicalMIMEHeaderKey": reflect.ValueOf(i92.CanonicalMIMEHeaderKey),
		"Dial": reflect.ValueOf(i92.Dial),
		"NewConn": reflect.ValueOf(i92.NewConn),
		"NewReader": reflect.ValueOf(i92.NewReader),
		"NewWriter": reflect.ValueOf(i92.NewWriter),
		"TrimBytes": reflect.ValueOf(i92.TrimBytes),
		"TrimString": reflect.ValueOf(i92.TrimString),
	}
	stdfuncs["net/url"] = map[string]reflect.Value{
		"JoinPath": reflect.ValueOf(i93.JoinPath),
		"Parse": reflect.ValueOf(i93.Parse),
		"ParseQuery": reflect.ValueOf(i93.ParseQuery),
		"ParseRequestURI": reflect.ValueOf(i93.ParseRequestURI),
		"PathEscape": reflect.ValueOf(i93.PathEscape),
		"PathUnescape": reflect.ValueOf(i93.PathUnescape),
		"QueryEscape": reflect.ValueOf(i93.QueryEscape),
		"QueryUnescape": reflect.ValueOf(i93.QueryUnescape),
		"User": reflect.ValueOf(i93.User),
		"UserPassword": reflect.ValueOf(i93.UserPassword),
	}
	stdfuncs["os"] = map[string]reflect.Value{
		"Args": reflect.ValueOf(i94.Args),
		"Chdir": reflect.ValueOf(i94.Chdir),
		"Chmod": reflect.ValueOf(i94.Chmod),
		"Chown": reflect.ValueOf(i94.Chown),
		"Chtimes": reflect.ValueOf(i94.Chtimes),
		"Clearenv": reflect.ValueOf(i94.Clearenv),
		"CopyFS": reflect.ValueOf(i94.CopyFS),
		"Create": reflect.ValueOf(i94.Create),
		"CreateTemp": reflect.ValueOf(i94.CreateTemp),
		"DevNull": reflect.ValueOf(i94.DevNull),
		"DirFS": reflect.ValueOf(i94.DirFS),
		"Environ": reflect.ValueOf(i94.Environ),
		"ErrClosed": reflect.ValueOf(i94.ErrClosed),
		"ErrDeadlineExceeded": reflect.ValueOf(i94.ErrDeadlineExceeded),
		"ErrExist": reflect.ValueOf(i94.ErrExist),
		"ErrInvalid": reflect.ValueOf(i94.ErrInvalid),
		"ErrNoDeadline": reflect.ValueOf(i94.ErrNoDeadline),
		"ErrNotExist": reflect.ValueOf(i94.ErrNotExist),
		"ErrPermission": reflect.ValueOf(i94.ErrPermission),
		"ErrProcessDone": reflect.ValueOf(i94.ErrProcessDone),
		"Executable": reflect.ValueOf(i94.Executable),
		"Exit": reflect.ValueOf(i94.Exit),
		"Expand": reflect.ValueOf(i94.Expand),
		"ExpandEnv": reflect.ValueOf(i94.ExpandEnv),
		"FindProcess": reflect.ValueOf(i94.FindProcess),
		"Getegid": reflect.ValueOf(i94.Getegid),
		"Getenv": reflect.ValueOf(i94.Getenv),
		"Geteuid": reflect.ValueOf(i94.Geteuid),
		"Getgid": reflect.ValueOf(i94.Getgid),
		"Getgroups": reflect.ValueOf(i94.Getgroups),
		"Getpagesize": reflect.ValueOf(i94.Getpagesize),
		"Getpid": reflect.ValueOf(i94.Getpid),
		"Getppid": reflect.ValueOf(i94.Getppid),
		"Getuid": reflect.ValueOf(i94.Getuid),
		"Getwd": reflect.ValueOf(i94.Getwd),
		"Hostname": reflect.ValueOf(i94.Hostname),
		"Interrupt": reflect.ValueOf(i94.Interrupt),
		"IsExist": reflect.ValueOf(i94.IsExist),
		"IsNotExist": reflect.ValueOf(i94.IsNotExist),
		"IsPathSeparator": reflect.ValueOf(i94.IsPathSeparator),
		"IsPermission": reflect.ValueOf(i94.IsPermission),
		"IsTimeout": reflect.ValueOf(i94.IsTimeout),
		"Kill": reflect.ValueOf(i94.Kill),
		"Lchown": reflect.ValueOf(i94.Lchown),
		"Link": reflect.ValueOf(i94.Link),
		"LookupEnv": reflect.ValueOf(i94.LookupEnv),
		"Lstat": reflect.ValueOf(i94.Lstat),
		"Mkdir": reflect.ValueOf(i94.Mkdir),
		"MkdirAll": reflect.ValueOf(i94.MkdirAll),
		"MkdirTemp": reflect.ValueOf(i94.MkdirTemp),
		"ModeAppend": reflect.ValueOf(i94.ModeAppend),
		"ModeCharDevice": reflect.ValueOf(i94.ModeCharDevice),
		"ModeDevice": reflect.ValueOf(i94.ModeDevice),
		"ModeDir": reflect.ValueOf(i94.ModeDir),
		"ModeExclusive": reflect.ValueOf(i94.ModeExclusive),
		"ModeIrregular": reflect.ValueOf(i94.ModeIrregular),
		"ModeNamedPipe": reflect.ValueOf(i94.ModeNamedPipe),
		"ModePerm": reflect.ValueOf(i94.ModePerm),
		"ModeSetgid": reflect.ValueOf(i94.ModeSetgid),
		"ModeSetuid": reflect.ValueOf(i94.ModeSetuid),
		"ModeSocket": reflect.ValueOf(i94.ModeSocket),
		"ModeSticky": reflect.ValueOf(i94.ModeSticky),
		"ModeSymlink": reflect.ValueOf(i94.ModeSymlink),
		"ModeTemporary": reflect.ValueOf(i94.ModeTemporary),
		"ModeType": reflect.ValueOf(i94.ModeType),
		"NewFile": reflect.ValueOf(i94.NewFile),
		"NewSyscallError": reflect.ValueOf(i94.NewSyscallError),
		"O_APPEND": reflect.ValueOf(i94.O_APPEND),
		"O_CREATE": reflect.ValueOf(i94.O_CREATE),
		"O_EXCL": reflect.ValueOf(i94.O_EXCL),
		"O_RDONLY": reflect.ValueOf(i94.O_RDONLY),
		"O_RDWR": reflect.ValueOf(i94.O_RDWR),
		"O_SYNC": reflect.ValueOf(i94.O_SYNC),
		"O_TRUNC": reflect.ValueOf(i94.O_TRUNC),
		"O_WRONLY": reflect.ValueOf(i94.O_WRONLY),
		"Open": reflect.ValueOf(i94.Open),
		"OpenFile": reflect.ValueOf(i94.OpenFile),
		"OpenInRoot": reflect.ValueOf(i94.OpenInRoot),
		"OpenRoot": reflect.ValueOf(i94.OpenRoot),
		"PathListSeparator": reflect.ValueOf(i94.PathListSeparator),
		"PathSeparator": reflect.ValueOf(i94.PathSeparator),
		"Pipe": reflect.ValueOf(i94.Pipe),
		"ReadDir": reflect.ValueOf(i94.ReadDir),
		"ReadFile": reflect.ValueOf(i94.ReadFile),
		"Readlink": reflect.ValueOf(i94.Readlink),
		"Remove": reflect.ValueOf(i94.Remove),
		"RemoveAll": reflect.ValueOf(i94.RemoveAll),
		"Rename": reflect.ValueOf(i94.Rename),
		"SEEK_CUR": reflect.ValueOf(i94.SEEK_CUR),
		"SEEK_END": reflect.ValueOf(i94.SEEK_END),
		"SEEK_SET": reflect.ValueOf(i94.SEEK_SET),
		"SameFile": reflect.ValueOf(i94.SameFile),
		"Setenv": reflect.ValueOf(i94.Setenv),
		"StartProcess": reflect.ValueOf(i94.StartProcess),
		"Stat": reflect.ValueOf(i94.Stat),
		"Stderr": reflect.ValueOf(i94.Stderr),
		"Stdin": reflect.ValueOf(i94.Stdin),
		"Stdout": reflect.ValueOf(i94.Stdout),
		"Symlink": reflect.ValueOf(i94.Symlink),
		"TempDir": reflect.ValueOf(i94.TempDir),
		"Truncate": reflect.ValueOf(i94.Truncate),
		"Unsetenv": reflect.ValueOf(i94.Unsetenv),
		"UserCacheDir": reflect.ValueOf(i94.UserCacheDir),
		"UserConfigDir": reflect.ValueOf(i94.UserConfigDir),
		"UserHomeDir": reflect.ValueOf(i94.UserHomeDir),
		"WriteFile": reflect.ValueOf(i94.WriteFile),
	}
	stdfuncs["os/exec"] = map[string]reflect.Value{
		"Command": reflect.ValueOf(i95.Command),
		"CommandContext": reflect.ValueOf(i95.CommandContext),
		"ErrDot": reflect.ValueOf(i95.ErrDot),
		"ErrNotFound": reflect.ValueOf(i95.ErrNotFound),
		"ErrWaitDelay": reflect.ValueOf(i95.ErrWaitDelay),
		"LookPath": reflect.ValueOf(i95.LookPath),
	}
	stdfuncs["os/signal"] = map[string]reflect.Value{
		"Ignore": reflect.ValueOf(i96.Ignore),
		"Ignored": reflect.ValueOf(i96.Ignored),
		"Notify": reflect.ValueOf(i96.Notify),
		"NotifyContext": reflect.ValueOf(i96.NotifyContext),
		"Reset": reflect.ValueOf(i96.Reset),
		"Stop": reflect.ValueOf(i96.Stop),
	}
	stdfuncs["os/user"] = map[string]reflect.Value{
		"Current": reflect.ValueOf(i97.Current),
		"Lookup": reflect.ValueOf(i97.Lookup),
		"LookupGroup": reflect.ValueOf(i97.LookupGroup),
		"LookupGroupId": reflect.ValueOf(i97.LookupGroupId),
		"LookupId": reflect.ValueOf(i97.LookupId),
	}
	stdfuncs["path"] = map[string]reflect.Value{
		"Base": reflect.ValueOf(i98.Base),
		"Clean": reflect.ValueOf(i98.Clean),
		"Dir": reflect.ValueOf(i98.Dir),
		"ErrBadPattern": reflect.ValueOf(i98.ErrBadPattern),
		"Ext": reflect.ValueOf(i98.Ext),
		"IsAbs": reflect.ValueOf(i98.IsAbs),
		"Join": reflect.ValueOf(i98.Join),
		"Match": reflect.ValueOf(i98.Match),
		"Split": reflect.ValueOf(i98.Split),
	}
	stdfuncs["path/filepath"] = map[string]reflect.Value{
		"Abs": reflect.ValueOf(i99.Abs),
		"Base": reflect.ValueOf(i99.Base),
		"Clean": reflect.ValueOf(i99.Clean),
		"Dir": reflect.ValueOf(i99.Dir),
		"ErrBadPattern": reflect.ValueOf(i99.ErrBadPattern),
		"EvalSymlinks": reflect.ValueOf(i99.EvalSymlinks),
		"Ext": reflect.ValueOf(i99.Ext),
		"FromSlash": reflect.ValueOf(i99.FromSlash),
		"Glob": reflect.ValueOf(i99.Glob),
		"HasPrefix": reflect.ValueOf(i99.HasPrefix),
		"IsAbs": reflect.ValueOf(i99.IsAbs),
		"IsLocal": reflect.ValueOf(i99.IsLocal),
		"Join": reflect.ValueOf(i99.Join),
		"ListSeparator": reflect.ValueOf(i99.ListSeparator),
		"Localize": reflect.ValueOf(i99.Localize),
		"Match": reflect.ValueOf(i99.Match),
		"Rel": reflect.ValueOf(i99.Rel),
		"Separator": reflect.ValueOf(i99.Separator),
		"SkipAll": reflect.ValueOf(i99.SkipAll),
		"SkipDir": reflect.ValueOf(i99.SkipDir),
		"Split": reflect.ValueOf(i99.Split),
		"SplitList": reflect.ValueOf(i99.SplitList),
		"ToSlash": reflect.ValueOf(i99.ToSlash),
		"VolumeName": reflect.ValueOf(i99.VolumeName),
		"Walk": reflect.ValueOf(i99.Walk),
		"WalkDir": reflect.ValueOf(i99.WalkDir),
	}
	stdfuncs["plugin"] = map[string]reflect.Value{
		"Open": reflect.ValueOf(i100.Open),
	}
	stdfuncs["regexp"] = map[string]reflect.Value{
		"Compile": reflect.ValueOf(i101.Compile),
		"CompilePOSIX": reflect.ValueOf(i101.CompilePOSIX),
		"Match": reflect.ValueOf(i101.Match),
		"MatchReader": reflect.ValueOf(i101.MatchReader),
		"MatchString": reflect.ValueOf(i101.MatchString),
		"MustCompile": reflect.ValueOf(i101.MustCompile),
		"MustCompilePOSIX": reflect.ValueOf(i101.MustCompilePOSIX),
		"QuoteMeta": reflect.ValueOf(i101.QuoteMeta),
	}
	stdfuncs["regexp/syntax"] = map[string]reflect.Value{
		"ClassNL": reflect.ValueOf(i102.ClassNL),
		"Compile": reflect.ValueOf(i102.Compile),
		"DotNL": reflect.ValueOf(i102.DotNL),
		"EmptyBeginLine": reflect.ValueOf(i102.EmptyBeginLine),
		"EmptyBeginText": reflect.ValueOf(i102.EmptyBeginText),
		"EmptyEndLine": reflect.ValueOf(i102.EmptyEndLine),
		"EmptyEndText": reflect.ValueOf(i102.EmptyEndText),
		"EmptyNoWordBoundary": reflect.ValueOf(i102.EmptyNoWordBoundary),
		"EmptyOpContext": reflect.ValueOf(i102.EmptyOpContext),
		"EmptyWordBoundary": reflect.ValueOf(i102.EmptyWordBoundary),
		"ErrInternalError": reflect.ValueOf(i102.ErrInternalError),
		"ErrInvalidCharClass": reflect.ValueOf(i102.ErrInvalidCharClass),
		"ErrInvalidCharRange": reflect.ValueOf(i102.ErrInvalidCharRange),
		"ErrInvalidEscape": reflect.ValueOf(i102.ErrInvalidEscape),
		"ErrInvalidNamedCapture": reflect.ValueOf(i102.ErrInvalidNamedCapture),
		"ErrInvalidPerlOp": reflect.ValueOf(i102.ErrInvalidPerlOp),
		"ErrInvalidRepeatOp": reflect.ValueOf(i102.ErrInvalidRepeatOp),
		"ErrInvalidRepeatSize": reflect.ValueOf(i102.ErrInvalidRepeatSize),
		"ErrInvalidUTF8": reflect.ValueOf(i102.ErrInvalidUTF8),
		"ErrLarge": reflect.ValueOf(i102.ErrLarge),
		"ErrMissingBracket": reflect.ValueOf(i102.ErrMissingBracket),
		"ErrMissingParen": reflect.ValueOf(i102.ErrMissingParen),
		"ErrMissingRepeatArgument": reflect.ValueOf(i102.ErrMissingRepeatArgument),
		"ErrNestingDepth": reflect.ValueOf(i102.ErrNestingDepth),
		"ErrTrailingBackslash": reflect.ValueOf(i102.ErrTrailingBackslash),
		"ErrUnexpectedParen": reflect.ValueOf(i102.ErrUnexpectedParen),
		"FoldCase": reflect.ValueOf(i102.FoldCase),
		"InstAlt": reflect.ValueOf(i102.InstAlt),
		"InstAltMatch": reflect.ValueOf(i102.InstAltMatch),
		"InstCapture": reflect.ValueOf(i102.InstCapture),
		"InstEmptyWidth": reflect.ValueOf(i102.InstEmptyWidth),
		"InstFail": reflect.ValueOf(i102.InstFail),
		"InstMatch": reflect.ValueOf(i102.InstMatch),
		"InstNop": reflect.ValueOf(i102.InstNop),
		"InstRune": reflect.ValueOf(i102.InstRune),
		"InstRune1": reflect.ValueOf(i102.InstRune1),
		"InstRuneAny": reflect.ValueOf(i102.InstRuneAny),
		"InstRuneAnyNotNL": reflect.ValueOf(i102.InstRuneAnyNotNL),
		"IsWordChar": reflect.ValueOf(i102.IsWordChar),
		"Literal": reflect.ValueOf(i102.Literal),
		"MatchNL": reflect.ValueOf(i102.MatchNL),
		"NonGreedy": reflect.ValueOf(i102.NonGreedy),
		"OneLine": reflect.ValueOf(i102.OneLine),
		"OpAlternate": reflect.ValueOf(i102.OpAlternate),
		"OpAnyChar": reflect.ValueOf(i102.OpAnyChar),
		"OpAnyCharNotNL": reflect.ValueOf(i102.OpAnyCharNotNL),
		"OpBeginLine": reflect.ValueOf(i102.OpBeginLine),
		"OpBeginText": reflect.ValueOf(i102.OpBeginText),
		"OpCapture": reflect.ValueOf(i102.OpCapture),
		"OpCharClass": reflect.ValueOf(i102.OpCharClass),
		"OpConcat": reflect.ValueOf(i102.OpConcat),
		"OpEmptyMatch": reflect.ValueOf(i102.OpEmptyMatch),
		"OpEndLine": reflect.ValueOf(i102.OpEndLine),
		"OpEndText": reflect.ValueOf(i102.OpEndText),
		"OpLiteral": reflect.ValueOf(i102.OpLiteral),
		"OpNoMatch": reflect.ValueOf(i102.OpNoMatch),
		"OpNoWordBoundary": reflect.ValueOf(i102.OpNoWordBoundary),
		"OpPlus": reflect.ValueOf(i102.OpPlus),
		"OpQuest": reflect.ValueOf(i102.OpQuest),
		"OpRepeat": reflect.ValueOf(i102.OpRepeat),
		"OpStar": reflect.ValueOf(i102.OpStar),
		"OpWordBoundary": reflect.ValueOf(i102.OpWordBoundary),
		"POSIX": reflect.ValueOf(i102.POSIX),
		"Parse": reflect.ValueOf(i102.Parse),
		"Perl": reflect.ValueOf(i102.Perl),
		"PerlX": reflect.ValueOf(i102.PerlX),
		"Simple": reflect.ValueOf(i102.Simple),
		"UnicodeGroups": reflect.ValueOf(i102.UnicodeGroups),
		"WasDollar": reflect.ValueOf(i102.WasDollar),
	}
	stdfuncs["sort"] = map[string]reflect.Value{
		"Find": reflect.ValueOf(i103.Find),
		"Float64s": reflect.ValueOf(i103.Float64s),
		"Float64sAreSorted": reflect.ValueOf(i103.Float64sAreSorted),
		"Ints": reflect.ValueOf(i103.Ints),
		"IntsAreSorted": reflect.ValueOf(i103.IntsAreSorted),
		"IsSorted": reflect.ValueOf(i103.IsSorted),
		"Reverse": reflect.ValueOf(i103.Reverse),
		"Search": reflect.ValueOf(i103.Search),
		"SearchFloat64s": reflect.ValueOf(i103.SearchFloat64s),
		"SearchInts": reflect.ValueOf(i103.SearchInts),
		"SearchStrings": reflect.ValueOf(i103.SearchStrings),
		"Slice": reflect.ValueOf(i103.Slice),
		"SliceIsSorted": reflect.ValueOf(i103.SliceIsSorted),
		"SliceStable": reflect.ValueOf(i103.SliceStable),
		"Sort": reflect.ValueOf(i103.Sort),
		"Stable": reflect.ValueOf(i103.Stable),
		"Strings": reflect.ValueOf(i103.Strings),
		"StringsAreSorted": reflect.ValueOf(i103.StringsAreSorted),
	}
	stdfuncs["strconv"] = map[string]reflect.Value{
		"AppendBool": reflect.ValueOf(i104.AppendBool),
		"AppendFloat": reflect.ValueOf(i104.AppendFloat),
		"AppendInt": reflect.ValueOf(i104.AppendInt),
		"AppendQuote": reflect.ValueOf(i104.AppendQuote),
		"AppendQuoteRune": reflect.ValueOf(i104.AppendQuoteRune),
		"AppendQuoteRuneToASCII": reflect.ValueOf(i104.AppendQuoteRuneToASCII),
		"AppendQuoteRuneToGraphic": reflect.ValueOf(i104.AppendQuoteRuneToGraphic),
		"AppendQuoteToASCII": reflect.ValueOf(i104.AppendQuoteToASCII),
		"AppendQuoteToGraphic": reflect.ValueOf(i104.AppendQuoteToGraphic),
		"AppendUint": reflect.ValueOf(i104.AppendUint),
		"Atoi": reflect.ValueOf(i104.Atoi),
		"CanBackquote": reflect.ValueOf(i104.CanBackquote),
		"ErrRange": reflect.ValueOf(i104.ErrRange),
		"ErrSyntax": reflect.ValueOf(i104.ErrSyntax),
		"FormatBool": reflect.ValueOf(i104.FormatBool),
		"FormatComplex": reflect.ValueOf(i104.FormatComplex),
		"FormatFloat": reflect.ValueOf(i104.FormatFloat),
		"FormatInt": reflect.ValueOf(i104.FormatInt),
		"FormatUint": reflect.ValueOf(i104.FormatUint),
		"IntSize": reflect.ValueOf(i104.IntSize),
		"IsGraphic": reflect.ValueOf(i104.IsGraphic),
		"IsPrint": reflect.ValueOf(i104.IsPrint),
		"Itoa": reflect.ValueOf(i104.Itoa),
		"ParseBool": reflect.ValueOf(i104.ParseBool),
		"ParseComplex": reflect.ValueOf(i104.ParseComplex),
		"ParseFloat": reflect.ValueOf(i104.ParseFloat),
		"ParseInt": reflect.ValueOf(i104.ParseInt),
		"ParseUint": reflect.ValueOf(i104.ParseUint),
		"Quote": reflect.ValueOf(i104.Quote),
		"QuoteRune": reflect.ValueOf(i104.QuoteRune),
		"QuoteRuneToASCII": reflect.ValueOf(i104.QuoteRuneToASCII),
		"QuoteRuneToGraphic": reflect.ValueOf(i104.QuoteRuneToGraphic),
		"QuoteToASCII": reflect.ValueOf(i104.QuoteToASCII),
		"QuoteToGraphic": reflect.ValueOf(i104.QuoteToGraphic),
		"QuotedPrefix": reflect.ValueOf(i104.QuotedPrefix),
		"Unquote": reflect.ValueOf(i104.Unquote),
		"UnquoteChar": reflect.ValueOf(i104.UnquoteChar),
	}
	stdfuncs["strings"] = map[string]reflect.Value{
		"Clone": reflect.ValueOf(i105.Clone),
		"Compare": reflect.ValueOf(i105.Compare),
		"Contains": reflect.ValueOf(i105.Contains),
		"ContainsAny": reflect.ValueOf(i105.ContainsAny),
		"ContainsFunc": reflect.ValueOf(i105.ContainsFunc),
		"ContainsRune": reflect.ValueOf(i105.ContainsRune),
		"Count": reflect.ValueOf(i105.Count),
		"Cut": reflect.ValueOf(i105.Cut),
		"CutPrefix": reflect.ValueOf(i105.CutPrefix),
		"CutSuffix": reflect.ValueOf(i105.CutSuffix),
		"EqualFold": reflect.ValueOf(i105.EqualFold),
		"Fields": reflect.ValueOf(i105.Fields),
		"FieldsFunc": reflect.ValueOf(i105.FieldsFunc),
		"FieldsFuncSeq": reflect.ValueOf(i105.FieldsFuncSeq),
		"FieldsSeq": reflect.ValueOf(i105.FieldsSeq),
		"HasPrefix": reflect.ValueOf(i105.HasPrefix),
		"HasSuffix": reflect.ValueOf(i105.HasSuffix),
		"Index": reflect.ValueOf(i105.Index),
		"IndexAny": reflect.ValueOf(i105.IndexAny),
		"IndexByte": reflect.ValueOf(i105.IndexByte),
		"IndexFunc": reflect.ValueOf(i105.IndexFunc),
		"IndexRune": reflect.ValueOf(i105.IndexRune),
		"Join": reflect.ValueOf(i105.Join),
		"LastIndex": reflect.ValueOf(i105.LastIndex),
		"LastIndexAny": reflect.ValueOf(i105.LastIndexAny),
		"LastIndexByte": reflect.ValueOf(i105.LastIndexByte),
		"LastIndexFunc": reflect.ValueOf(i105.LastIndexFunc),
		"Lines": reflect.ValueOf(i105.Lines),
		"Map": reflect.ValueOf(i105.Map),
		"NewReader": reflect.ValueOf(i105.NewReader),
		"NewReplacer": reflect.ValueOf(i105.NewReplacer),
		"Repeat": reflect.ValueOf(i105.Repeat),
		"Replace": reflect.ValueOf(i105.Replace),
		"ReplaceAll": reflect.ValueOf(i105.ReplaceAll),
		"Split": reflect.ValueOf(i105.Split),
		"SplitAfter": reflect.ValueOf(i105.SplitAfter),
		"SplitAfterN": reflect.ValueOf(i105.SplitAfterN),
		"SplitAfterSeq": reflect.ValueOf(i105.SplitAfterSeq),
		"SplitN": reflect.ValueOf(i105.SplitN),
		"SplitSeq": reflect.ValueOf(i105.SplitSeq),
		"Title": reflect.ValueOf(i105.Title),
		"ToLower": reflect.ValueOf(i105.ToLower),
		"ToLowerSpecial": reflect.ValueOf(i105.ToLowerSpecial),
		"ToTitle": reflect.ValueOf(i105.ToTitle),
		"ToTitleSpecial": reflect.ValueOf(i105.ToTitleSpecial),
		"ToUpper": reflect.ValueOf(i105.ToUpper),
		"ToUpperSpecial": reflect.ValueOf(i105.ToUpperSpecial),
		"ToValidUTF8": reflect.ValueOf(i105.ToValidUTF8),
		"Trim": reflect.ValueOf(i105.Trim),
		"TrimFunc": reflect.ValueOf(i105.TrimFunc),
		"TrimLeft": reflect.ValueOf(i105.TrimLeft),
		"TrimLeftFunc": reflect.ValueOf(i105.TrimLeftFunc),
		"TrimPrefix": reflect.ValueOf(i105.TrimPrefix),
		"TrimRight": reflect.ValueOf(i105.TrimRight),
		"TrimRightFunc": reflect.ValueOf(i105.TrimRightFunc),
		"TrimSpace": reflect.ValueOf(i105.TrimSpace),
		"TrimSuffix": reflect.ValueOf(i105.TrimSuffix),
	}
	stdfuncs["sync"] = map[string]reflect.Value{
		"NewCond": reflect.ValueOf(i106.NewCond),
		"OnceFunc": reflect.ValueOf(i106.OnceFunc),
	}
	stdfuncs["sync/atomic"] = map[string]reflect.Value{
		"AddInt32": reflect.ValueOf(i107.AddInt32),
		"AddInt64": reflect.ValueOf(i107.AddInt64),
		"AddUint32": reflect.ValueOf(i107.AddUint32),
		"AddUint64": reflect.ValueOf(i107.AddUint64),
		"AddUintptr": reflect.ValueOf(i107.AddUintptr),
		"AndInt32": reflect.ValueOf(i107.AndInt32),
		"AndInt64": reflect.ValueOf(i107.AndInt64),
		"AndUint32": reflect.ValueOf(i107.AndUint32),
		"AndUint64": reflect.ValueOf(i107.AndUint64),
		"AndUintptr": reflect.ValueOf(i107.AndUintptr),
		"CompareAndSwapInt32": reflect.ValueOf(i107.CompareAndSwapInt32),
		"CompareAndSwapInt64": reflect.ValueOf(i107.CompareAndSwapInt64),
		"CompareAndSwapPointer": reflect.ValueOf(i107.CompareAndSwapPointer),
		"CompareAndSwapUint32": reflect.ValueOf(i107.CompareAndSwapUint32),
		"CompareAndSwapUint64": reflect.ValueOf(i107.CompareAndSwapUint64),
		"CompareAndSwapUintptr": reflect.ValueOf(i107.CompareAndSwapUintptr),
		"LoadInt32": reflect.ValueOf(i107.LoadInt32),
		"LoadInt64": reflect.ValueOf(i107.LoadInt64),
		"LoadPointer": reflect.ValueOf(i107.LoadPointer),
		"LoadUint32": reflect.ValueOf(i107.LoadUint32),
		"LoadUint64": reflect.ValueOf(i107.LoadUint64),
		"LoadUintptr": reflect.ValueOf(i107.LoadUintptr),
		"OrInt32": reflect.ValueOf(i107.OrInt32),
		"OrInt64": reflect.ValueOf(i107.OrInt64),
		"OrUint32": reflect.ValueOf(i107.OrUint32),
		"OrUint64": reflect.ValueOf(i107.OrUint64),
		"OrUintptr": reflect.ValueOf(i107.OrUintptr),
		"StoreInt32": reflect.ValueOf(i107.StoreInt32),
		"StoreInt64": reflect.ValueOf(i107.StoreInt64),
		"StorePointer": reflect.ValueOf(i107.StorePointer),
		"StoreUint32": reflect.ValueOf(i107.StoreUint32),
		"StoreUint64": reflect.ValueOf(i107.StoreUint64),
		"StoreUintptr": reflect.ValueOf(i107.StoreUintptr),
		"SwapInt32": reflect.ValueOf(i107.SwapInt32),
		"SwapInt64": reflect.ValueOf(i107.SwapInt64),
		"SwapPointer": reflect.ValueOf(i107.SwapPointer),
		"SwapUint32": reflect.ValueOf(i107.SwapUint32),
		"SwapUint64": reflect.ValueOf(i107.SwapUint64),
		"SwapUintptr": reflect.ValueOf(i107.SwapUintptr),
	}
	stdfuncs["text/scanner"] = map[string]reflect.Value{
		"Char": reflect.ValueOf(i108.Char),
		"Comment": reflect.ValueOf(i108.Comment),
		"EOF": reflect.ValueOf(i108.EOF),
		"Float": reflect.ValueOf(i108.Float),
		"GoTokens": reflect.ValueOf(i108.GoTokens),
		"GoWhitespace": reflect.ValueOf(i108.GoWhitespace),
		"Ident": reflect.ValueOf(i108.Ident),
		"Int": reflect.ValueOf(i108.Int),
		"RawString": reflect.ValueOf(i108.RawString),
		"ScanChars": reflect.ValueOf(i108.ScanChars),
		"ScanComments": reflect.ValueOf(i108.ScanComments),
		"ScanFloats": reflect.ValueOf(i108.ScanFloats),
		"ScanIdents": reflect.ValueOf(i108.ScanIdents),
		"ScanInts": reflect.ValueOf(i108.ScanInts),
		"ScanRawStrings": reflect.ValueOf(i108.ScanRawStrings),
		"ScanStrings": reflect.ValueOf(i108.ScanStrings),
		"SkipComments": reflect.ValueOf(i108.SkipComments),
		"String": reflect.ValueOf(i108.String),
		"TokenString": reflect.ValueOf(i108.TokenString),
	}
	stdfuncs["text/tabwriter"] = map[string]reflect.Value{
		"AlignRight": reflect.ValueOf(i109.AlignRight),
		"Debug": reflect.ValueOf(i109.Debug),
		"DiscardEmptyColumns": reflect.ValueOf(i109.DiscardEmptyColumns),
		"Escape": reflect.ValueOf(i109.Escape),
		"FilterHTML": reflect.ValueOf(i109.FilterHTML),
		"NewWriter": reflect.ValueOf(i109.NewWriter),
		"StripEscape": reflect.ValueOf(i109.StripEscape),
		"TabIndent": reflect.ValueOf(i109.TabIndent),
	}
	stdfuncs["text/template"] = map[string]reflect.Value{
		"HTMLEscape": reflect.ValueOf(i110.HTMLEscape),
		"HTMLEscapeString": reflect.ValueOf(i110.HTMLEscapeString),
		"HTMLEscaper": reflect.ValueOf(i110.HTMLEscaper),
		"IsTrue": reflect.ValueOf(i110.IsTrue),
		"JSEscape": reflect.ValueOf(i110.JSEscape),
		"JSEscapeString": reflect.ValueOf(i110.JSEscapeString),
		"JSEscaper": reflect.ValueOf(i110.JSEscaper),
		"Must": reflect.ValueOf(i110.Must),
		"New": reflect.ValueOf(i110.New),
		"ParseFS": reflect.ValueOf(i110.ParseFS),
		"ParseFiles": reflect.ValueOf(i110.ParseFiles),
		"ParseGlob": reflect.ValueOf(i110.ParseGlob),
		"URLQueryEscaper": reflect.ValueOf(i110.URLQueryEscaper),
	}
	stdfuncs["text/template/parse"] = map[string]reflect.Value{
		"IsEmptyTree": reflect.ValueOf(i111.IsEmptyTree),
		"New": reflect.ValueOf(i111.New),
		"NewIdentifier": reflect.ValueOf(i111.NewIdentifier),
		"NodeAction": reflect.ValueOf(i111.NodeAction),
		"NodeBool": reflect.ValueOf(i111.NodeBool),
		"NodeBreak": reflect.ValueOf(i111.NodeBreak),
		"NodeChain": reflect.ValueOf(i111.NodeChain),
		"NodeCommand": reflect.ValueOf(i111.NodeCommand),
		"NodeComment": reflect.ValueOf(i111.NodeComment),
		"NodeContinue": reflect.ValueOf(i111.NodeContinue),
		"NodeDot": reflect.ValueOf(i111.NodeDot),
		"NodeField": reflect.ValueOf(i111.NodeField),
		"NodeIdentifier": reflect.ValueOf(i111.NodeIdentifier),
		"NodeIf": reflect.ValueOf(i111.NodeIf),
		"NodeList": reflect.ValueOf(i111.NodeList),
		"NodeNil": reflect.ValueOf(i111.NodeNil),
		"NodeNumber": reflect.ValueOf(i111.NodeNumber),
		"NodePipe": reflect.ValueOf(i111.NodePipe),
		"NodeRange": reflect.ValueOf(i111.NodeRange),
		"NodeString": reflect.ValueOf(i111.NodeString),
		"NodeTemplate": reflect.ValueOf(i111.NodeTemplate),
		"NodeText": reflect.ValueOf(i111.NodeText),
		"NodeVariable": reflect.ValueOf(i111.NodeVariable),
		"NodeWith": reflect.ValueOf(i111.NodeWith),
		"Parse": reflect.ValueOf(i111.Parse),
		"ParseComments": reflect.ValueOf(i111.ParseComments),
		"SkipFuncCheck": reflect.ValueOf(i111.SkipFuncCheck),
	}
	stdfuncs["time"] = map[string]reflect.Value{
		"ANSIC": reflect.ValueOf(i112.ANSIC),
		"After": reflect.ValueOf(i112.After),
		"AfterFunc": reflect.ValueOf(i112.AfterFunc),
		"April": reflect.ValueOf(i112.April),
		"August": reflect.ValueOf(i112.August),
		"Date": reflect.ValueOf(i112.Date),
		"DateOnly": reflect.ValueOf(i112.DateOnly),
		"DateTime": reflect.ValueOf(i112.DateTime),
		"December": reflect.ValueOf(i112.December),
		"February": reflect.ValueOf(i112.February),
		"FixedZone": reflect.ValueOf(i112.FixedZone),
		"Friday": reflect.ValueOf(i112.Friday),
		"Hour": reflect.ValueOf(i112.Hour),
		"January": reflect.ValueOf(i112.January),
		"July": reflect.ValueOf(i112.July),
		"June": reflect.ValueOf(i112.June),
		"Kitchen": reflect.ValueOf(i112.Kitchen),
		"Layout": reflect.ValueOf(i112.Layout),
		"LoadLocation": reflect.ValueOf(i112.LoadLocation),
		"LoadLocationFromTZData": reflect.ValueOf(i112.LoadLocationFromTZData),
		"Local": reflect.ValueOf(i112.Local),
		"March": reflect.ValueOf(i112.March),
		"May": reflect.ValueOf(i112.May),
		"Microsecond": reflect.ValueOf(i112.Microsecond),
		"Millisecond": reflect.ValueOf(i112.Millisecond),
		"Minute": reflect.ValueOf(i112.Minute),
		"Monday": reflect.ValueOf(i112.Monday),
		"Nanosecond": reflect.ValueOf(i112.Nanosecond),
		"NewTicker": reflect.ValueOf(i112.NewTicker),
		"NewTimer": reflect.ValueOf(i112.NewTimer),
		"November": reflect.ValueOf(i112.November),
		"Now": reflect.ValueOf(i112.Now),
		"October": reflect.ValueOf(i112.October),
		"Parse": reflect.ValueOf(i112.Parse),
		"ParseDuration": reflect.ValueOf(i112.ParseDuration),
		"ParseInLocation": reflect.ValueOf(i112.ParseInLocation),
		"RFC1123": reflect.ValueOf(i112.RFC1123),
		"RFC1123Z": reflect.ValueOf(i112.RFC1123Z),
		"RFC3339": reflect.ValueOf(i112.RFC3339),
		"RFC3339Nano": reflect.ValueOf(i112.RFC3339Nano),
		"RFC822": reflect.ValueOf(i112.RFC822),
		"RFC822Z": reflect.ValueOf(i112.RFC822Z),
		"RFC850": reflect.ValueOf(i112.RFC850),
		"RubyDate": reflect.ValueOf(i112.RubyDate),
		"Saturday": reflect.ValueOf(i112.Saturday),
		"Second": reflect.ValueOf(i112.Second),
		"September": reflect.ValueOf(i112.September),
		"Since": reflect.ValueOf(i112.Since),
		"Sleep": reflect.ValueOf(i112.Sleep),
		"Stamp": reflect.ValueOf(i112.Stamp),
		"StampMicro": reflect.ValueOf(i112.StampMicro),
		"StampMilli": reflect.ValueOf(i112.StampMilli),
		"StampNano": reflect.ValueOf(i112.StampNano),
		"Sunday": reflect.ValueOf(i112.Sunday),
		"Thursday": reflect.ValueOf(i112.Thursday),
		"Tick": reflect.ValueOf(i112.Tick),
		"TimeOnly": reflect.ValueOf(i112.TimeOnly),
		"Tuesday": reflect.ValueOf(i112.Tuesday),
		"UTC": reflect.ValueOf(i112.UTC),
		"Unix": reflect.ValueOf(i112.Unix),
		"UnixDate": reflect.ValueOf(i112.UnixDate),
		"UnixMicro": reflect.ValueOf(i112.UnixMicro),
		"UnixMilli": reflect.ValueOf(i112.UnixMilli),
		"Until": reflect.ValueOf(i112.Until),
		"Wednesday": reflect.ValueOf(i112.Wednesday),
	}
	stdfuncs["unicode"] = map[string]reflect.Value{
		"ASCII_Hex_Digit": reflect.ValueOf(i113.ASCII_Hex_Digit),
		"Adlam": reflect.ValueOf(i113.Adlam),
		"Ahom": reflect.ValueOf(i113.Ahom),
		"Anatolian_Hieroglyphs": reflect.ValueOf(i113.Anatolian_Hieroglyphs),
		"Arabic": reflect.ValueOf(i113.Arabic),
		"Armenian": reflect.ValueOf(i113.Armenian),
		"Avestan": reflect.ValueOf(i113.Avestan),
		"AzeriCase": reflect.ValueOf(i113.AzeriCase),
		"Balinese": reflect.ValueOf(i113.Balinese),
		"Bamum": reflect.ValueOf(i113.Bamum),
		"Bassa_Vah": reflect.ValueOf(i113.Bassa_Vah),
		"Batak": reflect.ValueOf(i113.Batak),
		"Bengali": reflect.ValueOf(i113.Bengali),
		"Bhaiksuki": reflect.ValueOf(i113.Bhaiksuki),
		"Bidi_Control": reflect.ValueOf(i113.Bidi_Control),
		"Bopomofo": reflect.ValueOf(i113.Bopomofo),
		"Brahmi": reflect.ValueOf(i113.Brahmi),
		"Braille": reflect.ValueOf(i113.Braille),
		"Buginese": reflect.ValueOf(i113.Buginese),
		"Buhid": reflect.ValueOf(i113.Buhid),
		"C": reflect.ValueOf(i113.C),
		"Canadian_Aboriginal": reflect.ValueOf(i113.Canadian_Aboriginal),
		"Carian": reflect.ValueOf(i113.Carian),
		"CaseRanges": reflect.ValueOf(i113.CaseRanges),
		"Categories": reflect.ValueOf(i113.Categories),
		"CategoryAliases": reflect.ValueOf(i113.CategoryAliases),
		"Caucasian_Albanian": reflect.ValueOf(i113.Caucasian_Albanian),
		"Cc": reflect.ValueOf(i113.Cc),
		"Cf": reflect.ValueOf(i113.Cf),
		"Chakma": reflect.ValueOf(i113.Chakma),
		"Cham": reflect.ValueOf(i113.Cham),
		"Cherokee": reflect.ValueOf(i113.Cherokee),
		"Chorasmian": reflect.ValueOf(i113.Chorasmian),
		"Cn": reflect.ValueOf(i113.Cn),
		"Co": reflect.ValueOf(i113.Co),
		"Common": reflect.ValueOf(i113.Common),
		"Coptic": reflect.ValueOf(i113.Coptic),
		"Cs": reflect.ValueOf(i113.Cs),
		"Cuneiform": reflect.ValueOf(i113.Cuneiform),
		"Cypriot": reflect.ValueOf(i113.Cypriot),
		"Cypro_Minoan": reflect.ValueOf(i113.Cypro_Minoan),
		"Cyrillic": reflect.ValueOf(i113.Cyrillic),
		"Dash": reflect.ValueOf(i113.Dash),
		"Deprecated": reflect.ValueOf(i113.Deprecated),
		"Deseret": reflect.ValueOf(i113.Deseret),
		"Devanagari": reflect.ValueOf(i113.Devanagari),
		"Diacritic": reflect.ValueOf(i113.Diacritic),
		"Digit": reflect.ValueOf(i113.Digit),
		"Dives_Akuru": reflect.ValueOf(i113.Dives_Akuru),
		"Dogra": reflect.ValueOf(i113.Dogra),
		"Duployan": reflect.ValueOf(i113.Duployan),
		"Egyptian_Hieroglyphs": reflect.ValueOf(i113.Egyptian_Hieroglyphs),
		"Elbasan": reflect.ValueOf(i113.Elbasan),
		"Elymaic": reflect.ValueOf(i113.Elymaic),
		"Ethiopic": reflect.ValueOf(i113.Ethiopic),
		"Extender": reflect.ValueOf(i113.Extender),
		"FoldCategory": reflect.ValueOf(i113.FoldCategory),
		"FoldScript": reflect.ValueOf(i113.FoldScript),
		"Georgian": reflect.ValueOf(i113.Georgian),
		"Glagolitic": reflect.ValueOf(i113.Glagolitic),
		"Gothic": reflect.ValueOf(i113.Gothic),
		"Grantha": reflect.ValueOf(i113.Grantha),
		"GraphicRanges": reflect.ValueOf(i113.GraphicRanges),
		"Greek": reflect.ValueOf(i113.Greek),
		"Gujarati": reflect.ValueOf(i113.Gujarati),
		"Gunjala_Gondi": reflect.ValueOf(i113.Gunjala_Gondi),
		"Gurmukhi": reflect.ValueOf(i113.Gurmukhi),
		"Han": reflect.ValueOf(i113.Han),
		"Hangul": reflect.ValueOf(i113.Hangul),
		"Hanifi_Rohingya": reflect.ValueOf(i113.Hanifi_Rohingya),
		"Hanunoo": reflect.ValueOf(i113.Hanunoo),
		"Hatran": reflect.ValueOf(i113.Hatran),
		"Hebrew": reflect.ValueOf(i113.Hebrew),
		"Hex_Digit": reflect.ValueOf(i113.Hex_Digit),
		"Hiragana": reflect.ValueOf(i113.Hiragana),
		"Hyphen": reflect.ValueOf(i113.Hyphen),
		"IDS_Binary_Operator": reflect.ValueOf(i113.IDS_Binary_Operator),
		"IDS_Trinary_Operator": reflect.ValueOf(i113.IDS_Trinary_Operator),
		"Ideographic": reflect.ValueOf(i113.Ideographic),
		"Imperial_Aramaic": reflect.ValueOf(i113.Imperial_Aramaic),
		"In": reflect.ValueOf(i113.In),
		"Inherited": reflect.ValueOf(i113.Inherited),
		"Inscriptional_Pahlavi": reflect.ValueOf(i113.Inscriptional_Pahlavi),
		"Inscriptional_Parthian": reflect.ValueOf(i113.Inscriptional_Parthian),
		"Is": reflect.ValueOf(i113.Is),
		"IsControl": reflect.ValueOf(i113.IsControl),
		"IsDigit": reflect.ValueOf(i113.IsDigit),
		"IsGraphic": reflect.ValueOf(i113.IsGraphic),
		"IsLetter": reflect.ValueOf(i113.IsLetter),
		"IsLower": reflect.ValueOf(i113.IsLower),
		"IsMark": reflect.ValueOf(i113.IsMark),
		"IsNumber": reflect.ValueOf(i113.IsNumber),
		"IsOneOf": reflect.ValueOf(i113.IsOneOf),
		"IsPrint": reflect.ValueOf(i113.IsPrint),
		"IsPunct": reflect.ValueOf(i113.IsPunct),
		"IsSpace": reflect.ValueOf(i113.IsSpace),
		"IsSymbol": reflect.ValueOf(i113.IsSymbol),
		"IsTitle": reflect.ValueOf(i113.IsTitle),
		"IsUpper": reflect.ValueOf(i113.IsUpper),
		"Javanese": reflect.ValueOf(i113.Javanese),
		"Join_Control": reflect.ValueOf(i113.Join_Control),
		"Kaithi": reflect.ValueOf(i113.Kaithi),
		"Kannada": reflect.ValueOf(i113.Kannada),
		"Katakana": reflect.ValueOf(i113.Katakana),
		"Kawi": reflect.ValueOf(i113.Kawi),
		"Kayah_Li": reflect.ValueOf(i113.Kayah_Li),
		"Kharoshthi": reflect.ValueOf(i113.Kharoshthi),
		"Khitan_Small_Script": reflect.ValueOf(i113.Khitan_Small_Script),
		"Khmer": reflect.ValueOf(i113.Khmer),
		"Khojki": reflect.ValueOf(i113.Khojki),
		"Khudawadi": reflect.ValueOf(i113.Khudawadi),
		"L": reflect.ValueOf(i113.L),
		"LC": reflect.ValueOf(i113.LC),
		"Lao": reflect.ValueOf(i113.Lao),
		"Latin": reflect.ValueOf(i113.Latin),
		"Lepcha": reflect.ValueOf(i113.Lepcha),
		"Letter": reflect.ValueOf(i113.Letter),
		"Limbu": reflect.ValueOf(i113.Limbu),
		"Linear_A": reflect.ValueOf(i113.Linear_A),
		"Linear_B": reflect.ValueOf(i113.Linear_B),
		"Lisu": reflect.ValueOf(i113.Lisu),
		"Ll": reflect.ValueOf(i113.Ll),
		"Lm": reflect.ValueOf(i113.Lm),
		"Lo": reflect.ValueOf(i113.Lo),
		"Logical_Order_Exception": reflect.ValueOf(i113.Logical_Order_Exception),
		"Lower": reflect.ValueOf(i113.Lower),
		"LowerCase": reflect.ValueOf(i113.LowerCase),
		"Lt": reflect.ValueOf(i113.Lt),
		"Lu": reflect.ValueOf(i113.Lu),
		"Lycian": reflect.ValueOf(i113.Lycian),
		"Lydian": reflect.ValueOf(i113.Lydian),
		"M": reflect.ValueOf(i113.M),
		"Mahajani": reflect.ValueOf(i113.Mahajani),
		"Makasar": reflect.ValueOf(i113.Makasar),
		"Malayalam": reflect.ValueOf(i113.Malayalam),
		"Mandaic": reflect.ValueOf(i113.Mandaic),
		"Manichaean": reflect.ValueOf(i113.Manichaean),
		"Marchen": reflect.ValueOf(i113.Marchen),
		"Mark": reflect.ValueOf(i113.Mark),
		"Masaram_Gondi": reflect.ValueOf(i113.Masaram_Gondi),
		"MaxASCII": reflect.ValueOf(i113.MaxASCII),
		"MaxCase": reflect.ValueOf(i113.MaxCase),
		"MaxLatin1": reflect.ValueOf(i113.MaxLatin1),
		"MaxRune": reflect.ValueOf(i113.MaxRune),
		"Mc": reflect.ValueOf(i113.Mc),
		"Me": reflect.ValueOf(i113.Me),
		"Medefaidrin": reflect.ValueOf(i113.Medefaidrin),
		"Meetei_Mayek": reflect.ValueOf(i113.Meetei_Mayek),
		"Mende_Kikakui": reflect.ValueOf(i113.Mende_Kikakui),
		"Meroitic_Cursive": reflect.ValueOf(i113.Meroitic_Cursive),
		"Meroitic_Hieroglyphs": reflect.ValueOf(i113.Meroitic_Hieroglyphs),
		"Miao": reflect.ValueOf(i113.Miao),
		"Mn": reflect.ValueOf(i113.Mn),
		"Modi": reflect.ValueOf(i113.Modi),
		"Mongolian": reflect.ValueOf(i113.Mongolian),
		"Mro": reflect.ValueOf(i113.Mro),
		"Multani": reflect.ValueOf(i113.Multani),
		"Myanmar": reflect.ValueOf(i113.Myanmar),
		"N": reflect.ValueOf(i113.N),
		"Nabataean": reflect.ValueOf(i113.Nabataean),
		"Nag_Mundari": reflect.ValueOf(i113.Nag_Mundari),
		"Nandinagari": reflect.ValueOf(i113.Nandinagari),
		"Nd": reflect.ValueOf(i113.Nd),
		"New_Tai_Lue": reflect.ValueOf(i113.New_Tai_Lue),
		"Newa": reflect.ValueOf(i113.Newa),
		"Nko": reflect.ValueOf(i113.Nko),
		"Nl": reflect.ValueOf(i113.Nl),
		"No": reflect.ValueOf(i113.No),
		"Noncharacter_Code_Point": reflect.ValueOf(i113.Noncharacter_Code_Point),
		"Number": reflect.ValueOf(i113.Number),
		"Nushu": reflect.ValueOf(i113.Nushu),
		"Nyiakeng_Puachue_Hmong": reflect.ValueOf(i113.Nyiakeng_Puachue_Hmong),
		"Ogham": reflect.ValueOf(i113.Ogham),
		"Ol_Chiki": reflect.ValueOf(i113.Ol_Chiki),
		"Old_Hungarian": reflect.ValueOf(i113.Old_Hungarian),
		"Old_Italic": reflect.ValueOf(i113.Old_Italic),
		"Old_North_Arabian": reflect.ValueOf(i113.Old_North_Arabian),
		"Old_Permic": reflect.ValueOf(i113.Old_Permic),
		"Old_Persian": reflect.ValueOf(i113.Old_Persian),
		"Old_Sogdian": reflect.ValueOf(i113.Old_Sogdian),
		"Old_South_Arabian": reflect.ValueOf(i113.Old_South_Arabian),
		"Old_Turkic": reflect.ValueOf(i113.Old_Turkic),
		"Old_Uyghur": reflect.ValueOf(i113.Old_Uyghur),
		"Oriya": reflect.ValueOf(i113.Oriya),
		"Osage": reflect.ValueOf(i113.Osage),
		"Osmanya": reflect.ValueOf(i113.Osmanya),
		"Other": reflect.ValueOf(i113.Other),
		"Other_Alphabetic": reflect.ValueOf(i113.Other_Alphabetic),
		"Other_Default_Ignorable_Code_Point": reflect.ValueOf(i113.Other_Default_Ignorable_Code_Point),
		"Other_Grapheme_Extend": reflect.ValueOf(i113.Other_Grapheme_Extend),
		"Other_ID_Continue": reflect.ValueOf(i113.Other_ID_Continue),
		"Other_ID_Start": reflect.ValueOf(i113.Other_ID_Start),
		"Other_Lowercase": reflect.ValueOf(i113.Other_Lowercase),
		"Other_Math": reflect.ValueOf(i113.Other_Math),
		"Other_Uppercase": reflect.ValueOf(i113.Other_Uppercase),
		"P": reflect.ValueOf(i113.P),
		"Pahawh_Hmong": reflect.ValueOf(i113.Pahawh_Hmong),
		"Palmyrene": reflect.ValueOf(i113.Palmyrene),
		"Pattern_Syntax": reflect.ValueOf(i113.Pattern_Syntax),
		"Pattern_White_Space": reflect.ValueOf(i113.Pattern_White_Space),
		"Pau_Cin_Hau": reflect.ValueOf(i113.Pau_Cin_Hau),
		"Pc": reflect.ValueOf(i113.Pc),
		"Pd": reflect.ValueOf(i113.Pd),
		"Pe": reflect.ValueOf(i113.Pe),
		"Pf": reflect.ValueOf(i113.Pf),
		"Phags_Pa": reflect.ValueOf(i113.Phags_Pa),
		"Phoenician": reflect.ValueOf(i113.Phoenician),
		"Pi": reflect.ValueOf(i113.Pi),
		"Po": reflect.ValueOf(i113.Po),
		"Prepended_Concatenation_Mark": reflect.ValueOf(i113.Prepended_Concatenation_Mark),
		"PrintRanges": reflect.ValueOf(i113.PrintRanges),
		"Properties": reflect.ValueOf(i113.Properties),
		"Ps": reflect.ValueOf(i113.Ps),
		"Psalter_Pahlavi": reflect.ValueOf(i113.Psalter_Pahlavi),
		"Punct": reflect.ValueOf(i113.Punct),
		"Quotation_Mark": reflect.ValueOf(i113.Quotation_Mark),
		"Radical": reflect.ValueOf(i113.Radical),
		"Regional_Indicator": reflect.ValueOf(i113.Regional_Indicator),
		"Rejang": reflect.ValueOf(i113.Rejang),
		"ReplacementChar": reflect.ValueOf(i113.ReplacementChar),
		"Runic": reflect.ValueOf(i113.Runic),
		"S": reflect.ValueOf(i113.S),
		"STerm": reflect.ValueOf(i113.STerm),
		"Samaritan": reflect.ValueOf(i113.Samaritan),
		"Saurashtra": reflect.ValueOf(i113.Saurashtra),
		"Sc": reflect.ValueOf(i113.Sc),
		"Scripts": reflect.ValueOf(i113.Scripts),
		"Sentence_Terminal": reflect.ValueOf(i113.Sentence_Terminal),
		"Sharada": reflect.ValueOf(i113.Sharada),
		"Shavian": reflect.ValueOf(i113.Shavian),
		"Siddham": reflect.ValueOf(i113.Siddham),
		"SignWriting": reflect.ValueOf(i113.SignWriting),
		"SimpleFold": reflect.ValueOf(i113.SimpleFold),
		"Sinhala": reflect.ValueOf(i113.Sinhala),
		"Sk": reflect.ValueOf(i113.Sk),
		"Sm": reflect.ValueOf(i113.Sm),
		"So": reflect.ValueOf(i113.So),
		"Soft_Dotted": reflect.ValueOf(i113.Soft_Dotted),
		"Sogdian": reflect.ValueOf(i113.Sogdian),
		"Sora_Sompeng": reflect.ValueOf(i113.Sora_Sompeng),
		"Soyombo": reflect.ValueOf(i113.Soyombo),
		"Space": reflect.ValueOf(i113.Space),
		"Sundanese": reflect.ValueOf(i113.Sundanese),
		"Syloti_Nagri": reflect.ValueOf(i113.Syloti_Nagri),
		"Symbol": reflect.ValueOf(i113.Symbol),
		"Syriac": reflect.ValueOf(i113.Syriac),
		"Tagalog": reflect.ValueOf(i113.Tagalog),
		"Tagbanwa": reflect.ValueOf(i113.Tagbanwa),
		"Tai_Le": reflect.ValueOf(i113.Tai_Le),
		"Tai_Tham": reflect.ValueOf(i113.Tai_Tham),
		"Tai_Viet": reflect.ValueOf(i113.Tai_Viet),
		"Takri": reflect.ValueOf(i113.Takri),
		"Tamil": reflect.ValueOf(i113.Tamil),
		"Tangsa": reflect.ValueOf(i113.Tangsa),
		"Tangut": reflect.ValueOf(i113.Tangut),
		"Telugu": reflect.ValueOf(i113.Telugu),
		"Terminal_Punctuation": reflect.ValueOf(i113.Terminal_Punctuation),
		"Thaana": reflect.ValueOf(i113.Thaana),
		"Thai": reflect.ValueOf(i113.Thai),
		"Tibetan": reflect.ValueOf(i113.Tibetan),
		"Tifinagh": reflect.ValueOf(i113.Tifinagh),
		"Tirhuta": reflect.ValueOf(i113.Tirhuta),
		"Title": reflect.ValueOf(i113.Title),
		"TitleCase": reflect.ValueOf(i113.TitleCase),
		"To": reflect.ValueOf(i113.To),
		"ToLower": reflect.ValueOf(i113.ToLower),
		"ToTitle": reflect.ValueOf(i113.ToTitle),
		"ToUpper": reflect.ValueOf(i113.ToUpper),
		"Toto": reflect.ValueOf(i113.Toto),
		"TurkishCase": reflect.ValueOf(i113.TurkishCase),
		"Ugaritic": reflect.ValueOf(i113.Ugaritic),
		"Unified_Ideograph": reflect.ValueOf(i113.Unified_Ideograph),
		"Upper": reflect.ValueOf(i113.Upper),
		"UpperCase": reflect.ValueOf(i113.UpperCase),
		"UpperLower": reflect.ValueOf(i113.UpperLower),
		"Vai": reflect.ValueOf(i113.Vai),
		"Variation_Selector": reflect.ValueOf(i113.Variation_Selector),
		"Version": reflect.ValueOf(i113.Version),
		"Vithkuqi": reflect.ValueOf(i113.Vithkuqi),
		"Wancho": reflect.ValueOf(i113.Wancho),
		"Warang_Citi": reflect.ValueOf(i113.Warang_Citi),
		"White_Space": reflect.ValueOf(i113.White_Space),
		"Yezidi": reflect.ValueOf(i113.Yezidi),
		"Yi": reflect.ValueOf(i113.Yi),
		"Z": reflect.ValueOf(i113.Z),
		"Zanabazar_Square": reflect.ValueOf(i113.Zanabazar_Square),
		"Zl": reflect.ValueOf(i113.Zl),
		"Zp": reflect.ValueOf(i113.Zp),
		"Zs": reflect.ValueOf(i113.Zs),
	}
	stdfuncs["unicode/utf16"] = map[string]reflect.Value{
		"AppendRune": reflect.ValueOf(i114.AppendRune),
		"Decode": reflect.ValueOf(i114.Decode),
		"DecodeRune": reflect.ValueOf(i114.DecodeRune),
		"Encode": reflect.ValueOf(i114.Encode),
		"EncodeRune": reflect.ValueOf(i114.EncodeRune),
		"IsSurrogate": reflect.ValueOf(i114.IsSurrogate),
		"RuneLen": reflect.ValueOf(i114.RuneLen),
	}
	stdfuncs["unicode/utf8"] = map[string]reflect.Value{
		"AppendRune": reflect.ValueOf(i115.AppendRune),
		"DecodeLastRune": reflect.ValueOf(i115.DecodeLastRune),
		"DecodeLastRuneInString": reflect.ValueOf(i115.DecodeLastRuneInString),
		"DecodeRune": reflect.ValueOf(i115.DecodeRune),
		"DecodeRuneInString": reflect.ValueOf(i115.DecodeRuneInString),
		"EncodeRune": reflect.ValueOf(i115.EncodeRune),
		"FullRune": reflect.ValueOf(i115.FullRune),
		"FullRuneInString": reflect.ValueOf(i115.FullRuneInString),
		"MaxRune": reflect.ValueOf(i115.MaxRune),
		"RuneCount": reflect.ValueOf(i115.RuneCount),
		"RuneCountInString": reflect.ValueOf(i115.RuneCountInString),
		"RuneError": reflect.ValueOf(i115.RuneError),
		"RuneLen": reflect.ValueOf(i115.RuneLen),
		"RuneSelf": reflect.ValueOf(i115.RuneSelf),
		"RuneStart": reflect.ValueOf(i115.RuneStart),
		"UTFMax": reflect.ValueOf(i115.UTFMax),
		"Valid": reflect.ValueOf(i115.Valid),
		"ValidRune": reflect.ValueOf(i115.ValidRune),
		"ValidString": reflect.ValueOf(i115.ValidString),
	}
}
